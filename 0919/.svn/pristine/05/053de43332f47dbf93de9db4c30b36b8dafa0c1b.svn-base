<template>   
  <section>
    <!-- 点击新增时的弹出框，这里面有上传文件的框框与选择操作系统的下拉框 -->
    <el-dialog :title="addUpdateTitle" :visible.sync="showDialog" ref="formData" :before-close="handleClose">
      <!-- 依据要求重新修改界面 -->
      <el-form ref="addEditForm" :model="formData" :rules="addUpdateRules" label-width="10px">
         <el-form-item required>
           <el-row :gutter="0">
             <el-col :span="12">
               <el-col :span="5">
                 <span>操作系统</span>
               </el-col>
               <el-col :span="18">
                <el-form-item prop="system">
                 <el-select v-model="formData.system" placeholder="请选择" @change="selectForUpload">
                 <el-option 
                    v-for="item in systems"
                    :key="item.id"
                    :label="item.name"
                    :value="item.id">
                  </el-option>
                </el-select>
                </el-form-item>
               </el-col>
             </el-col>
             <el-col :span="12">
                <el-col :span="5">
                  <span>强制更新</span>
                </el-col>
                <el-col :span="18">
                   <el-form-item prop="forceUpdate">
                    <el-select v-model="formData.forceUpdate" placeholder="请选择">
                   <el-option label="是" value="1" select></el-option>
                   <el-option label="否" value="0"></el-option>
                </el-select>
                </el-form-item>
                </el-col>
             </el-col>
           </el-row>
         </el-form-item>
         <el-form-item required>
           <el-row>
             <el-col :span="12">
               <el-col :span="5"> 
               <span>机场名称</span>
               </el-col>
               <el-col :span="18">
               <el-form-item prop="airport">
               <el-select v-model="formData.airport" filterable multiple placeholder="请选择">
                 <el-option
                    v-for="item in airportsSelect"
                    :key="item.value"
                    :label="item.text"
                    :value="item.value">
                 </el-option>
              </el-select>
              </el-form-item>
              </el-col>
             </el-col>
             <el-col :span="12">
               <el-col :span="5">
                 <span>版本类型</span>
               </el-col>
               <el-col :span="18">
               <el-form-item prop="versionType">
                 <el-select v-model="formData.versionType" placeholder="请选择">
                 <el-option label="增量包" value="1"></el-option>
                 <el-option label="完整包" value="0" select></el-option>
                 </el-select>
                 </el-form-item>
               </el-col>
             </el-col>
           </el-row>
         </el-form-item>
         <el-form-item required>
           <el-row>
             <el-col :span="12">
               <el-col :span="5">
                  <span>生效时间</span>
               </el-col>
               <el-col :span="18">
               <el-form-item prop="updateStart">
                   <el-date-picker type="datetime" placeholder="请选择" v-model="formData.updateStart">
                   </el-date-picker>
                   </el-form-item>
               </el-col>
             </el-col>
             <el-col :span="12">
               <el-col :span="5">
                 <span>
                   版本描述
                 </span>
               </el-col>
               <el-col :span="18">
                 <el-input type="textarea" v-model="formData.versionDes" :disabled="false" placeholder="请输入版本描述"></el-input>
               </el-col>
             </el-col>
           </el-row>
         </el-form-item>
         <el-form-item>
           <el-row>
             <el-col :span="12" v-show="false">
               <el-col :span="5">
                 <span>
                   版本号
                 </span>
               </el-col>
               <el-col :span="18">
                 <el-input v-model="formData.versionNo" :disabled="true" placeholder="选择操作系统后自动生成版本号"></el-input>
               </el-col>
             </el-col>
             <el-col :span="12">
               <el-col :span="5">
                 <span>文件上传</span>
               </el-col>
               <el-col :span="18">
                  <el-upload
                    class="upload-demo"
                    ref="uploadPackage"
                    :action="uploadUrl"
                    :data="uploadParams"
                    :headers="headersUpload"
                    :on-success="uploadSuccess"
                    :file-list="fileList"
                    :on-error="uploadError"
                    :auto-upload="false">
                    <el-row :gutter="20">
                      <el-col :span="8">
                        <el-button size="small" type="primary">选择文件</el-button>
                      </el-col>
                      <el-col :span="16">
                        <div>请上传对应的安装包</div>
                      </el-col>
                    </el-row>
                  </el-upload>
               </el-col>
             </el-col>
           </el-row>
         </el-form-item>
         <el-form-item v-show="false">
           <el-row>
             <el-col :span="12">
               <el-col :span="5">
                 <span>发布用户</span>
               </el-col>
               <el-col :span="18">
                  <el-input v-model="formData.publishUser" :disabled="true" placeholder="请输入发布用户"></el-input>
               </el-col>
             </el-col>
             <el-col :span="12">
               <el-col :span="5">
                 <span>下载路径</span>
               </el-col>
               <el-col :span="18">
                 <el-input v-model="formData.path" :disabled="true" placeholder="请输入下载路径"></el-input>
               </el-col>
              </el-col>
            </el-row>
         </el-form-item>
        <div class="dialog-footer" style="margin-left: 425px;">
        <el-button @click="cancel">取消</el-button>
        <el-button @click="reset">重置</el-button>
        <el-button type="primary" @click="submit">提交</el-button>
        </div>
      </el-form>
    </el-dialog>
    <!-- 下载记录表 -->
    <el-dialog :title="downloadRecordVersionNo" :visible.sync="showDownloadTable" size="small">
      <template>
        <el-table
          :data="downloadRecords"
          max-height="300"
          border
          style="width: 100%">
          <el-table-column
            prop="airport"
            label="机场"
            min-width="150">
          </el-table-column>
          <el-table-column
            prop="deviceId"
            label="设备ID"
            width="150">
          </el-table-column>
          <el-table-column
            prop="downloadtime"
            label="下载时间"
            width="160">
          </el-table-column>
          <el-table-column
            prop="ip"
            label="IP地址"
            width="150">
          </el-table-column>
        </el-table>
      </template>
    </el-dialog>
    <!--工具条-->
    <el-col :span="24" class="toolbar" style="padding-bottom: 0px;">
      <el-form :inline="true" :model="filters">
        <el-form-item>
        <el-select v-model="filters.selectedSystem" placeholder="请选择操作系统类型">
        <el-option
          v-for="item in systems"
          :key="item.id"
          :label="item.name"
          :value="item.id">
        </el-option>
        </el-select>
        </el-form-item>
        <el-form-item>
          <el-select v-model="filters.airport" filterable placeholder="请输入机场名称">
            <el-option
              v-for="item in airportsSelect"
              :key="item.value"
              :label="item.text"
              :value="item.value">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="getVersions" icon="search">搜索</el-button>
          <el-button type="primary" @click="handleAdd" icon="plus">新增</el-button>
        </el-form-item>
      </el-form>
    </el-col>

    <!--列表-->
    <el-table v-bind:data="versions" highlight-current-row :height="tableHeight" v-loading="listLoading" @selection-change="selsChange" style="width: 100%;">
      <!-- 代表每一行所展开的展开行 -->
      <el-table-column type="selection" width="55">
      </el-table-column>
      <el-table-column type="index" width="60">
      </el-table-column>
      <!-- <el-table-column prop="appId" label="应用程序ID" width="150" sortable>
      </el-table-column> -->
      <el-table-column prop="versionNo" label="版本号" width="250" sortable>
      </el-table-column>
      <el-table-column prop="system" label="适用系统" min-width="120" sortable>
      </el-table-column>
      <el-table-column prop="airport" label="目标机场" show-overflow-tooltip  min-width="210" sortable>
      </el-table-column>
      <el-table-column prop="versionType" label="版本类型" width="100" sortable>
      </el-table-column>
      <el-table-column prop="versionDes" label="版本描述"  width="120" sortable>
      </el-table-column>
      <el-table-column prop="publishDate" label="发布日期"  width="150" sortable>
      </el-table-column>
      <el-table-column prop="publishUser" :formatter="getUserName" label="发布用户"  width="120" sortable>
      </el-table-column>
      <el-table-column prop="updateStart" label="生效时间"  width="150" sortable>
      </el-table-column>
      <!-- <el-table-column prop="path" label="下载路径"  width="195" sortable>
      </el-table-column> -->
      <el-table-column prop="forceUpdate" label="强制更新"  width="100" sortable>
      </el-table-column>
      <el-table-column label="操作" width="180" fixed="right">
        <template scope="scope">
          <el-button size="small" @click="handleDownloadRecords(scope.$index, scope.row)">记录</el-button>
          <!-- <el-button size="small" @click="handleEdit(scope.$index, scope.row)">编辑</el-button> -->
          <el-button size="small" @click="handleDel(scope.$index, scope.row)">删除</el-button>
        </template>
      </el-table-column>
    </el-table>
    <!--工具条-->
    <el-col :span="24" class="toolbar-bottom">
      <el-pagination layout="prev, pager, next" @current-change="handleCurrentChange" :page-size="pageSize" :total="total" style="float:right;">
      </el-pagination>
    </el-col>
    <!--删除窗口-->
    <common-delete
        :to="API.delVersionInfoRecord().go"
        :callback="getVersions"
        :labelWidth="100"
        ref="delConfirm"></common-delete>
  </section>
</template>

<script>
  import util from '../../common/js/util'
  import chooseDialog from './../../components/CommChooseGrid'
  import commonDelete from './../../components/CommDelete'
  import API from '../../api'
  import axiosHelper from './../../common/js/axios-helper'
  export default {
    data () {
      return {
        filters: {
          selectedSystem: '',
          airport: ''
        },
        systems: [
          {
            id: 'Windows',
            name: '微软操作系统'
          },
          {
            id: 'Ubuntu',
            name: '乌班图操作系统'
          },
          {
            id: 'Android',
            name: '安卓操作系统'
          }
        ],
        selectedSystem: '',
        uploadParams: {
          system: '',
          forceUpdate: '',
          airport: '',
          versionType: '',
          publishDate: '',
          updateStart: '',
          versionNo: '',
          versionDes: '',
          publishUser: '',
          path: ''
        },
        showDownloadTable: false,
        versions: [],
        total: 0,
        pageNumber: 1,
        pageSize: 10,
        listLoading: false,
        sels: [],
        airportsSelect: [],
        showDialog: false,
        uploadUrl: '',
        fileName: '',
        // 表格的高度的修改
        tableHeight: 495,
        fileList: [],
        // 最初的版本信息
        originVersionData: [],
        // 存放下载记录的变量
        downloadRecords: [],
        // 将下载记录与版本信息整合后的变量，也许没用
        dataDownloadAndVersions: [],
        // expandinline的值
        expandInline: true,
        // 用于获取用户的名称
        allUsersData: [],
        // 新增编辑需要的字段
        addUpdateTitle: '',
        // 判断是新增还是编辑
        isAdd: Boolean,
        // 是否显示上传文件的item
        showUploadItem: Boolean,
        // 在下载记录表上面显示是哪个版本号的下载记录表
        downloadRecordVersionNo: '',
        // 用于保存请求的头部信息
        headersUpload: null,
        // 显示在目标机场上的文字
        showOverflowTooltip: true,
        // 表单的数据
        formData: {
          system: '',
          versionNo: '',
          airport: '',
          versionType: '',
          versionDes: '',
          publishDate: '',
          publishUser: '',
          updateStart: '',
          path: '',
          forceUpdate: ''
        },
        // 表单验证
        addUpdateRules: {
          system: [
             { required: true, message: '请选择操作系统！' }
          ],
          forceUpdate: [
             { required: true, message: '请选择是否强制更新！' }
          ],
          airport: [
             { required: true, message: '请选择机场名称！' }
          ],
          versionType: [
             { required: true, message: '请选择版本类型' }
          ],
          updateStart: [
             { required: true, message: '请选择生效时间' }
          ]
        },
        API: API
      }
    },
    components: {
      chooseDialog: chooseDialog,
      commonDelete: commonDelete
    },
    methods: {
      // 点击分页刷新
      handleCurrentChange (val) {
        this.pageNumber = val
        this.getVersions()
      },
      // 获取版本信息列表
      getVersions () {
        let para = {
          pageNumber: this.pageNumber,
          pageSize: this.pageSize,
          system: this.filters.selectedSystem,
          airport: this.filters.airport
        }
        // para.airport = para.airport.join(',')
        // 加载开始
        this.listLoading = true
        API.getVersionInfoList().go(para).then((data) => {
          if (data.ok) {
            this.originVersionData = data.attr.data.list
            for (var s = 0; s < data.attr.data.list.length; s++) {
              data.attr.data.list[s].forceUpdate = this.getForceUpdateName(data.attr.data.list[s].forceUpdate)
              data.attr.data.list[s].versionType = this.getVersionTypeName(data.attr.data.list[s].versionType)
              data.attr.data.list[s].airport = this.getAirportName(data.attr.data.list[s].airport)
            }
            this.versions = data.attr.data.list
            this.total = data.attr.data.pager.recordCount
            this.getDownloadRecords()
            this.listLoading = false
            this.filters.selectedSystem = ''
            this.filters.airport = ''
          } else {
            this.$notify(util.notifyBody(false, data.msg))
            this.filters.selectedSystem = ''
            this.filters.airport = ''
            this.listLoading = false
          }
        })
      },
      // 点击复选框的时候发生的变化
      selsChange: function (sels) {
        this.sels = sels
      },
      // 更多操作
      handleCommand: function (command, self) {
        var node = self.$vnode.data.attrs
        /* eslint-disable */
        eval('this.' + command).call(this, node.index, node.row)
        /* eslint-enable */
      },
      // 删除
      handleDel: function (index, row) {
        this.$refs['delConfirm'].del(row.id)
      },
      // 显示新增界面，点击新增后出现的页面
      handleAdd: function () {
        this.reset()
        this.showUploadItem = true
        this.addUpdateTitle = '新增'
        this.formData.publishUser = localStorage.getItem('AdminId')
        for (var c = 0; c < this.allUsersData.length; c++) {
          if (this.formData.publishUser === this.allUsersData[c].id) {
            this.formData.publishUser = this.allUsersData[c].name
          }
        }
        // 这个字符串是微软操作系统
        var selectedSystem = 'Windows'
        this.selectForUpload(selectedSystem)
        this.formData.forceUpdate = '1'
        this.formData.versionType = '0'
        this.formData.system = 'Windows'
        this.formData.updateStart = new Date()
        this.isAdd = true
        this.showDialog = true
      },
      // 选择操作系统，并且进行赋值
      selectForUpload: function (val) {
        // 为了拼接上传的安装包的名字
        var suffix = null
        // 时间的编号
        var moment = null
        var date = null
        var dataFormated = null
        var systemName = null
        moment = require('moment')
        date = new Date()
        dataFormated = moment(date).format('YYYYMMDDHHmmss')
        // 操作系统的名字
        systemName = val
        // 操作系统的后缀
        if (val === 'Windows') {
          suffix = '.exe'
        }
        if (val === 'Android') {
          suffix = '.apk'
        }
        if (val === 'Ubuntu') {
          suffix = '.deb'
        }
        // 拼接后的上传的参数
        // this.uploadParams.packageName = systemName + dataFormated
        // this.uploadParams.packageForPath = systemName + dataFormated + suffix
        this.uploadUrl = '/raiis/appversions/upload'
        this.formData.versionNo = systemName + dataFormated
        this.formData.system = val
        this.formData.path = systemName + dataFormated + suffix
      },
      // 上传成功后，所进行的一些操作
      uploadSuccess: function (file) {
        // debugger
        if (file.ok) {
          // this.formAbled()
          this.loading = false
          this.$notify(util.notifyBody(file.ok, file.msg))
          this.showDialog = false
          this.filters.selectedSystem = ''
          this.filters.airport = ''
          this.fileList = []
          this.getVersions()
        } else {
          this.$notify(util.notifyBody(false, file.msg))
        }
      },
      uploadError: function (file) {
        this.loading = false
        this.filters.selectedSystem = ''
        this.filters.airport = ''
        this.$notify(util.notifyBody(file.ok, file.msg))
        this.fileList = []
        this.reset()
      },
      // 对新增的内容进行上传
      submit: function () {
        // 连同参数和安装包一起上传
        if (this.isAdd === true) {
          // 配置头部信息
          this.headersUpload = axiosHelper.generatAuthHeader()
          this.$confirm('确认提交吗？', '提示', {}).then(() => {
            this.loading = true
            this.uploadParams.system = this.formData.system
            this.uploadParams.versionNo = this.formData.versionNo
            this.uploadParams.airport = this.formData.airport.join(',')
            this.uploadParams.versionType = this.formData.versionType
            this.uploadParams.versionDes = this.formData.versionDes
            var nowTime = new Date()
            this.uploadParams.publishDate = this.dateFormated(nowTime)
            this.uploadParams.publishUser = this.formData.publishUser
            this.uploadParams.updateStart = this.dateFormated(this.formData.updateStart)
            this.uploadParams.path = this.formData.path
            this.uploadParams.forceUpdate = this.formData.forceUpdate
            for (var h = 0; h < this.allUsersData.length; h++) {
              if (this.uploadParams.publishUser === this.allUsersData[h].name) {
                this.uploadParams.publishUser = this.allUsersData[h].id
              }
            }
            this.$refs.uploadPackage.submit()
          }).catch(() => {
            this.$message({
              type: 'info',
              message: '已取消提交'
            })
          })
        }
        if (this.isAdd === false) {
          this.$confirm('确认提交吗？', '提示', {}).then(() => {
            this.loading = true
            var oldValue = {
              system: '',
              versionNo: '',
              airport: '',
              versionType: '',
              versionDes: '',
              publishDate: '',
              publishUser: '',
              updateStart: '',
              path: '',
              forceUpdate: ''
            }
            let para = { newValue: this.formData, oldValue: oldValue }
            if (para.newValue.updateStart) {
              para.newValue.updateStart = this.dateFormated(para.newValue.updateStart)
            }
            if (para.newValue.publishDate) {
              para.newValue.publishDate = this.dateFormated(para.newValue.publishDate)
            }
            for (var l = 0; l < this.allUsersData.length; l++) {
              if (para.newValue.publishUser === this.allUsersData[l].name) {
                para.newValue.publishUser = this.allUsersData[l].id
              }
            }
            API.updateVersionInfoRecord().go(para).then((res) => {
              if (res.ok) {
                this.loading = false
                this.$notify(util.notifyBody(res.ok, res.msg))
                this.showDialog = false
                this.getVersions()
              } else {
                this.loading = false
                this.$notify(util.notifyBody(res.ok, res.msg))
                this.fileList = []
                this.reset()
              }
            })
          }).catch(() => {
            this.$message({
              type: 'info',
              message: '已取消提交'
            })
          })
        }
      },
      // 转换时间格式
      dateFormated: function (date) {
        var dataFormated = null
        var moment = null
        moment = require('moment')
        dataFormated = moment(date).format('YYYY-MM-DD hh:mm:ss')
        return dataFormated
      },
      // 显示编辑界面
      handleEdit: function (index, row) {
        var editRow = null
        editRow = util.deepCopy(row)
        editRow.airport = this.getAirportValue(editRow.airport)
        editRow.forceUpdate = this.getForceUpdateValue(editRow.forceUpdate)
        editRow.versionType = this.getVersionTypeValue(editRow.versionType)
        this.formData = editRow
        this.formData.publishUser = editRow.publishUser
        for (var c = 0; c < this.allUsersData.length; c++) {
          if (this.formData.publishUser === this.allUsersData[c].id) {
            this.formData.publishUser = this.allUsersData[c].name
          }
        }
        this.addUpdateTitle = '编辑'
        this.isAdd = false
        this.showUploadItem = false
        this.showDialog = true
      },
      // 显示下载记录表
      handleDownloadRecords: function (index, row) {
        this.downloadRecordVersionNo = '下载记录——' + row.versionNo
        this.showDownloadTable = true
        this.downloadRecords = row.downloadRecords
      },
      // 格式化用户名
      getUserName: function (row, column, cellValue) {
        for (var k = 0; k < this.allUsersData.length; k++) {
          if (cellValue === this.allUsersData[k].id) {
            return this.allUsersData[k].name
          }
        }
      },
      // 关闭这个弹出框的时候所触发的事件
      handleClose: function (done) {
        this.$confirm('确认关闭？')
          .then(_ => {
            done()
          })
          .catch(_ => {})
      },
      // 获取机场列表
      getAirportList: function () {
        let para = {
         pageNumber: 1,
         pageSize: 1000,
         iatacode: '',
         icaocode: ''
        }
        API.getAirportListPage().go(para).then((data) => {
          if (data.ok) {
            this.airports = data.attr.data.list
            this.airportsSelect = util.typedAirport(this.airports)
            this.getAllUserList()
          } else {
            this.$notify(util.notifyBody(false, data.msg))
          }
        })
      },
      // 获取用户列表
      getAllUserList: function () {
        let param = {
          pageNumber: 1,
          pageSize: 10000,
          name: '',
          locked: null
        }
        API.getUserListPage().go(param).then((data) => {
          if (data.ok) {
            this.allUsersData = data.attr.data.list
            this.getVersions()
          } else {
            this.$notify(util.notifyBody(false, data.msg))
          }
        })
      },
      // 为了在table里将机场代码，版本类型，强制转换改成中文
      // 转换目标机场的名称
      getAirportName: function (data) {
        var result = ''
        data = data.split(',')
        for (var i = 0; i < data.length; i++) {
          for (var j = 0; j < this.airportsSelect.length; j++) {
            if (data[i] === this.airportsSelect[j].value) {
              result = this.airportsSelect[j].text + '；' + result
            }
          }
        }
        return result
      },
      // 格式化目标机场为了得到toottips的数据
      getAirportFormatteredName: function (data) {
        console.log('data', data)
        var result = data.airport.substring(0, 7) + '...'
        return result
      },
      // 转换版本类型
      getVersionTypeName: function (data) {
        if (data === '1') {
          return '增量包'
        }
        if (data === '0') {
          return '完整包'
        }
      },
      // 是否强制更新
      getForceUpdateName: function (data) {
        if (data === '1') {
          return '是'
        }
        if (data === '0') {
          return '否'
        }
      },
      // 为了在编辑的时候将机场代码，版本类型，强制转换改成value
      // 目标机场名称转换成value
      getAirportValue: function (data) {
        for (var n = 0; n < this.airportsSelect.length; n++) {
          if (data === this.airportsSelect[n].text) {
            return this.airportsSelect[n].value
          }
        }
      },
      // 将版本类型转换成value
      getVersionTypeValue: function (data) {
        if (data === '增量包') {
          return '1'
        }
        if (data === '完整包') {
          return '0'
        }
      },
      // 将是否强制更新转换成value
      getForceUpdateValue: function (data) {
        if (data === '是') {
          return '1'
        }
        if (data === '否') {
          return '0'
        }
      },
      // 获取下载记录
      getDownloadRecords: function () {
        API.getDownloadRecords().go().then((res) => {
          this.dataDownloadAndVersions = res.attr.data.list
          // 将下载记录的id与版本信息的id对应并且在versions里面创建downloadrecords属性
          this.versionsCreateDownloadRecords(this.versions, this.dataDownloadAndVersions)
        })
      },
      // 创建属性
      versionsCreateDownloadRecords: function (versions, records) {
        if (records === undefined) {
          return
        }
        for (var a = 0; a < versions.length; a++) {
          versions[a]['downloadRecords'] = []
          for (var j = 0; j < records.length; j++) {
            if (versions[a].id === records[j].versionId) {
              versions[a]['downloadRecords'].push(records[j])
            }
          }
        }
        this.versions = versions
      },
      cancel: function () {
        this.showDialog = false
      },
      reset: function () {
        this.formData = null
        this.formData = {
          system: '',
          versionNo: '',
          airport: [],
          versionType: '',
          versionDes: '',
          publishDate: '',
          publishUser: '',
          updateStart: '',
          path: '',
          forceUpdate: ''
        }
        this.fileList = []
      }
    },
    mounted () {
      this.getAirportList()
    }
  }

</script>

<style scoped>
  .el-dialog {
    position: absolute;
    left: 50%;
    -ms-transform: translateX(-50%);
    transform: translateX(-50%);
    background: #fff;
    border-radius: 2px;
    box-shadow: 0 1px 3px rgba(0,0,0,.3);
    box-sizing: border-box;
    margin-bottom: 50px;
    width: 75%!important;
  }
  .el-date-editor.el-input {
    width: 218px!important;
  }
  .el-textarea {
    width: 92%!important;
  }      
</style>
