<template>
  <section>
    <!--工具条-->
    <el-col :span="24" class="toolbar" style="padding-bottom: 0px;">
      <el-form :inline="true" :model="filters">
        <el-form-item>
          <el-select v-model="filters.deviceId" filterable clearable placeholder="请选择设备编号">
            <el-option
              v-for="item in deviceInfos"
              :key="item.id"
              :label="item.deviceIp"
              :value="item.id">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-select v-model="filters.temId" filterable clearable placeholder="请选择模板">
            <el-option
              v-for="item in templates"
              :key="item.id"
              :label="item.description"
              :value="item.id">
            </el-option>
          </el-select>
        </el-form-item>
        <!-- <el-form-item>
          <el-time-picker
            is-range
            format="HHmm"
            start="00:00"
            end="23:59"
            v-model="filters.timeRange"
            placeholder="选择时间范围">
          </el-time-picker>
        </el-form-item> -->
        <el-form-item>
          <el-button type="primary" v-on:click="getDeviceConfig">查询</el-button>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="handleAdd">新增</el-button>
        </el-form-item>
      </el-form>
    </el-col>

    <!--列表-->
    <div class="table-content">
      <el-table :data="table.DeviceConfig" highlight-current-row v-loading="table.loading" border @selection-change="selsChange" :height="tableHeight" style="width: 100%;">
        <!-- <el-table-column type="selection" width="55">
        </el-table-column> -->
        <el-table-column type="index" width="60">
          <template scope="scope">
            {{pageSize * (pageNumber - 1) + scope.$index + 1 }}
          </template>
        </el-table-column>
        <el-table-column prop="device.deviceIp" label="设备IP" show-overflow-tooltip width="180">
        </el-table-column>
        <el-table-column prop="tempConfig.description" label="模板" show-overflow-tooltip min-width="280">
        </el-table-column>
        <el-table-column prop="timeSpan" label="时间间隔" show-overflow-tooltip width="180">
        </el-table-column>
        <el-table-column prop="begin" label="开始时间" show-overflow-tooltip width="180">
        </el-table-column>
        <el-table-column prop="end" label="结束时间" show-overflow-tooltip width="180">
        </el-table-column>

        <el-table-column label="操作" width="160" fixed="right" >
          <template scope="scope">
            <el-button size="small" @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
            <el-button type="danger" size="small" @click="handleDel(scope.$index, scope.row)">删除</el-button>
          </template>
        </el-table-column>
      </el-table>
    </div>

    <!-- 分页 -->
    <pagination :to="getDeviceConfig" ref="page"></pagination>

    <!--新增界面-->
    <common-add-or-update
        size="tiny"
        :to="API.addDeviceConfig().go"
        :callback="getDeviceConfig"
        ref="addForm"></common-add-or-update>
    <!--编辑界面-->
    <common-add-or-update
        size="tiny"
        :to="API.editDeviceConfig().go"
        :callback="getDeviceConfig"
        ref="editForm"></common-add-or-update>
    <!--删除窗口-->
    <common-delete
        :to="API.removeDeviceConfig().go"
        :callback="getDeviceConfig"
        ref="delConfirm"></common-delete>
  </section>
</template>
<script>
import CommonAddOrUpdate from './../../components/CommAddOrUpdate'
import CommonDelete from './../../components/CommDelete'
import Pagination from './../../components/Pagination'
import API from './../../api'
import debounce from 'throttle-debounce/debounce'
import Util from './../../common/js/util'
export default {
  data () {
    // let deviceInfos = this.$cache.fetch('deviceInfo') || []
    return {
      API: API,
      tableHeight: 500,
      filters: {
        deviceId: '',
        temId: '',
        timeRange: ''
      },
      table: {
        DeviceConfig: [],
        loading: false
      },
      sels: [],
      deviceInfos: this.$cache.fetch('deviceInfo') || [],
      templates: this.$cache.fetch('templates') || []
    }
  },
  components: {
    CommonAddOrUpdate,
    Pagination,
    CommonDelete
  },
  watch: {
    '$store.state.cached' (val, oldVal) {
      this.deviceInfos = this.$cache.fetch('deviceInfo') || []
      this.templates = this.$cache.fetch('templates') || []
    }
  },
  computed: {
    pageNumber () {
      return this.$refs['page'].get('pageNumber')
    },
    pageSize () {
      return this.$refs['page'].get('pageSize')
    },
    fields () {
      return [
        { name: 'id', value: '', hidden: true },
        { name: 'deviceId', value: '', disabled: false, label: '设备', type: 'select', choose: this.deviceInfos.map(item => { return { text: item.deviceIp, value: item.id } }), rules: [ { required: true, message: '请选择设备', trigger: 'blur' } ] },
        { name: 'temId', value: '', label: '模板', type: 'select', choose: this.templates.map(item => { return { text: item.description, value: item.id } }), rules: [ { required: true, message: '请选择模板', trigger: 'blur' } ] },
        { name: 'timeSpan', value: 0, label: '时间间隔', type: 'number', rules: [ { type: 'number', required: true, message: '请填写时间间隔', trigger: 'blur' } ] },
        { name: 'begin', value: '', label: '开始时间', type: 'text', rules: [ { required: true, message: '请填写开始时间', trigger: 'blur' } ] },
        { name: 'end', value: '', label: '结束时间', type: 'text', rules: null }
      ]
    }
  },
  methods: {
    selsChange () {
      console.log('selsChange')
    },
    handleEdit (index, row) {
      let editFields = Util.deepCopy(this.fields)
      for (let i = 0; i < editFields.length; i++) {
        editFields[i].value = row[editFields[i].name]
      }
      this.$refs['editForm'].show(editFields, row)
    },
    handleDel (index, row) {
      this.$refs['delConfirm'].del(row.id)
    },
    handleDeviceSelect (item) {
      debounce(150, () => {})
      console.log(item)
    },
    handleAdd () {
      let addFields = Util.deepCopy(this.fields)
      this.$refs['addForm'].show(addFields)
    },
    getDeviceConfig () {
      this.table.loading = true
      let params = Object.assign({}, this.filters, this.$refs['page'].queryParam())
      API.getDeviceConfig().go(params).then(res => {
        console.log(res)
        this.table.loading = false
        this.table.DeviceConfig = res.attr.data.list
        this.$refs['page'].set('total', res.attr.data.pager.recordCount)
      })
    },
    handleCurrentChange (val) {
      this.getDeviceConfig()
    }
  },
  created () {
  },
  mounted () {
    this.getDeviceConfig()
  }
}
</script>
