/*
 * @Author: chenyang
 * @Date: 2017-09-21 17:14:14
 * @Last Modified by: chenyang
 * @Last Modified time: 2017-10-18 09:27:28
 */

 <template>
    <el-form v-show="visible">
      <div v-for="(item, index) in shoppeList" :key="item.imageSize">
      <el-card class="box-card maxWidth">
        <el-row>
          <el-tag type="danger">选择非值机柜台模式和服务</el-tag>
        </el-row>
        </br>
        <el-row :gutter="20" @click.native.capture="uploadClick(index)">
          <el-col :span="18">
            <el-form-item label="服务模式">
              <el-select v-model="item.serviceMode" placeholder="选择服务模式" :filterable="true" class="maxWidth" @change="getServiceType(index)">
                <el-option v-for="mode in flightServiceMode" :key="mode.value" :label="mode.text" :value="mode.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="服务类型">
              <el-select v-model="item.serviceType" placeholder="选择服务类型" :filterable="true" class="maxWidth">
                <el-option v-for="Servicetype in flightServiceType" :key="Servicetype.value" :label="Servicetype.text" :value="Servicetype.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="图片尺寸">
              <el-select v-model="item.imageSize" placeholder="选择图片尺寸" :filterable="true" class="maxWidth">
                <el-option v-for="size in imageSizeList" :key="size.value" :label="size.text" :value="size.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="描述">
                <el-input v-model="item.description" placeholder="添加描述,选填" type="textarea"></el-input>
            </el-form-item>
            <el-button type="success" @click="addCounters" v-if="index+1===shoppeList.length">新增非值机柜台信息</el-button>
            <el-button type="danger" @click="removeCounters(index)">删除非值机柜台信息</el-button>
          </el-col>
          <el-col :span="6">
            <el-upload
              ref="small"
              class="avatar-uploader"
              action="/raiis/image"
              :show-file-list="false"
              :on-success="shoppeUploadSuccess"
              :before-upload="handleBeforeUpload">
              <img v-if="item.imageUrl" :src="item.imageUrl" class="avatar">
              <i v-else class="el-icon-plus avatar-uploader-icon"></i>
            </el-upload>
            </br>
            <el-button type="info" @click="clearImages(index)" icon="delete" class="buttonwidth">清空图片</el-button>
          </el-col>
        </el-row>
    </el-card>
    </br>
    </div>
    </el-form>
</template>

 <script>
import GlobalConfig from '../../../common/config/global'
export default {
  props: {
    title: {
      type: String,
      default: '新增'
    },
    to: {
      type: Function,
      default: function () { }
    },
    callback: {
      type: Function,
      default: function () { }
    },
    FlightAirline: {
      type: Array
    },
    FlightServiceMode: {
      type: Array
    },
    FlightType: {
      type: Array
    }
  },
  data () {
    return {
      tabsValue: '',
      index: 0,
      uploadParamList: [], // 需要上传所有参数列表,如果选第一个tabs默认上传3条数据,第二个tabs一个专柜算一个 + 前三个
      imageSizeList: [],
      flightLogoAirline: [],
      flightServiceMode: [],
      flightServiceType: [],
      counterCount: 1,
      imageList: [],  // 存放每个Item的信息
      FlightLogoData: {url: '', airCompany: '', imageFormat: '', imageSize: '', imageName: '', description: ''},   // 普通柜一些的数据，不用数组存
      shoppeData: {imageUrl: '', serviceMode: '', serviceType: '', imageSize: '', description: ''},  // 专柜的一些基本数据
      shoppeList: [],  // 专柜的数组，有可能有多个
      visible: false,
      loading: false,
      oldValue: {},
      airLinesList: [],
      checkinFiled: { airCompany: '' },
      isInsert: true
      // deviceStatusList: [ { text: '删除', value: -1 }, { text: '在线', value: 0 }, { text: '离线', value: 1 }, { text: '异常', value: 2 } ],
      // 动态插入
    }
  },
  methods: {
    clearImages (index) {
      this.shoppeList[index].imageUrl = ''
    },
    uploadClick (index) {
      this.index = index
      console.log(index)
    },
    addCounters () {   // 新增专柜信息
      // this.counterCount += 1
      let length = this.shoppeList.length - 1
      if (this.shoppeList[length].imageUrl !== '' && this.shoppeList[length].serviceMode !== '' && this.shoppeList[length].serviceMode !== '' && this.shoppeList[length].imageSize !== '') {
        this.flightServiceType = []
        this.shoppeData = {imageUrl: '', serviceMode: '', serviceType: '', imageSize: '', description: ''}
        this.shoppeList.push(this.shoppeData)
        console.log(this.shoppeList)
      } else {
        this.$notify({
          title: '警告',
          message: '请先填充完所有的表单再进行新增!',
          type: 'warning'
        })
      }
    },
    clearFormData () {   // 清除表单数据
      if (this.tabsValue === '0') { // 第一个tabs
        this.FlightLogoData = {url: '', airCompany: '', imageFormat: '', imageSize: '', imageName: '', description: ''}
        this.isInsert = false   // 不插入新的数据，维持
        this.shoppeList = []
        this.shoppeData = {imageUrl: '', serviceMode: '', serviceType: '', imageSize: '', description: ''}
        this.shoppeList.push(this.shoppeData)
        this.tabsValue = '0'
      } else if (this.tabsValue === '1') {
        this.shoppeList = []
        this.shoppeData = {imageUrl: '', serviceMode: '', serviceType: '', imageSize: '', description: ''}
        this.FlightLogoData = {url: '', airCompany: '', imageFormat: '', imageSize: '', imageName: '', description: ''}
        this.shoppeList.push(this.shoppeData)
        this.isInsert = true
        this.tabsValue = '0'
      }
    },
    removeCounters (index) {  // 删除专柜x信息
      if (this.shoppeList.length <= 1) {
        this.$notify({
          title: '警告',
          message: '请至少保留一项',
          type: 'warning'
        })
      } else {
        this.shoppeList.splice(index, 1)
      }
    },
    clearImage () {   // 清空普通柜图片
      this.FlightLogoData.url = ''
    },
    getServiceType (index) {
      this.flightServiceType = []
      for (let i = 0; i < this.FlightType.length; i++) {
        if (this.FlightType[i].ckCounterTemplate === this.shoppeList[index].serviceMode) {
          console.log(this.shoppeList[index].serviceMode)
          let label = {text: this.FlightType[i].description + ' ' + this.FlightType[i].serviceTypeCode, value: this.FlightType[i].serviceTypeCode}
          this.flightServiceType.push(label)
        }
      }
    },
    handleClose () {
      this.visible = false
      // console.log('关闭')
      // this.shoppeList = []
      // this.shoppeList.push(this.shoppeData)
    },
    getImgSize () {
      this.imageSizeList = []
      for (let i = 0; i < GlobalConfig.imageSize.length; i++) {
        let label = {text: GlobalConfig.imageSize[i], value: GlobalConfig.imageSize[i]}
        this.imageSizeList.push(label)
      }
    },
    handleBeforeUpload (file) {
      const isLt2M = file.size / 1024 / 1024 < 2

      // if (!isJPG) {
      //   this.$message.error('上传头像图片只能是 JPG 格式!')
      // }
      if (!isLt2M) {
        this.$message.error('上传头像图片大小不能超过 2MB!')
      }
      // return isJPG && isLt2M
      return isLt2M
    },
    shoppeUploadSuccess (res, file) {
      this.shoppeList[this.index].imageUrl = URL.createObjectURL(file.raw)
    },
    uploadSuccess (res, file) {
      // 生成三条数据
      this.FlightLogoData.url = URL.createObjectURL(file.raw)
      // this.FlightLogoData.imageFormat = this.getFileFormat(file.name)
      // 第一条数据生成(命名航空公司、) / 第二条数据生成(命名 航空公司_全开柜O) / 第三条数据生成(命名 航空公司_普通柜台G) 其他字段(尺寸、格式、图片都一样)
      // 插入记录
    },
    getFileFormat (fileName) {
      let name = []
      name = fileName.split('.')
      console.log(name[1])
      return name[1]
    },
    getData () {
      this.flightLogoAirline = this.FlightAirline
      this.flightServiceMode = this.FlightServiceMode
    },
    show: function () {
      this.getImgSize()
      this.getData()
      if (this.isInsert === true) {   // 如果按的是第二个清空按钮
        this.shoppeList = []
        this.shoppeData = {imageUrl: '', serviceMode: '', serviceType: '', imageSize: '', description: ''}
        this.shoppeList.push(this.shoppeData)
      }
      this.isInsert = true
        // this.setData()
      this.visible = true
    }
  }
}
</script>

<style>
  .text {
    font-size: 14px;
  }

  .item {
    padding: 18px 0;
  }

  .clearfix:before,
  .clearfix:after {
      display: table;
      content: "";
  }
  .clearfix:after {
      clear: both
  }

  .box-card {
    width: 480px;
  }

  .maxWidth {
    width: 100%;
  }
  .avatar-uploader .el-upload {
    border: 1px dashed #d9d9d9;
    border-radius: 6px;
    cursor: pointer;
    position: relative;
    overflow: hidden;
  }
  .avatar-uploader .el-upload:hover {
    border-color: #20a0ff;
  }
  .avatar-uploader-icon {
    font-size: 28px;
    color: #8c939d;
    width: 178px;
    height: 178px;
    line-height: 178px;
    text-align: center;
  }
  .avatar {
    width: 178px;
    height: 178px;
    display: block;

  }
  .buttonwidth {
    width: 178px;
  }
</style>
