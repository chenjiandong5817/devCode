<!-- /*
 * @Author: cdroid
 * @Date: 2017-05-25 10:42:17
 * @Last Modified by: mikey.zhaopeng
 * @Last Modified time: 2017-06-27 15:33:48
 * @Description: 通用机场列表界面
 */ -->
<template>
  <section>
    <!--工具条-->
    <el-col :span="24" class="toolbar" style="padding-bottom: 0px;">
      <el-form :inline="true" :model="filters">
        <el-form-item>
          <el-input v-model="filters.gateCode" placeholder="编码" ></el-input>
        </el-form-item>
        <el-form-item>
          <el-select v-model="filters.airportCode" placeholder="请选择机场">
            <el-option
              v-for="item in adminAirportChoose"
              :key="item.value"
              :label="item.text"
              :value="item.value">
              <span style="float: left">{{ item.text }}</span>
              <span style="float: right; color: #8492a6; font-size: 13px">{{ item.code }}</span>
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" v-on:click="getGateList">查询</el-button>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="handleAdd">新增</el-button>
        </el-form-item>
      </el-form>
    </el-col>

    <!--列表-->
    <el-table v-bind:data="gates" highlight-current-row v-loading="listLoading" @selection-change="selsChange" :height="tableHeight" style="width: 100%;">
      <el-table-column type="selection" width="55">
      </el-table-column>
      <el-table-column type="index" width="60">
        <template scope="scope">
          {{pageSize * (pageNumber - 1) + scope.$index + 1 }}
        </template>
      </el-table-column>
      <el-table-column prop="gateCode" label="编码" width="90" sortable>
      </el-table-column>
      <el-table-column prop="displayCode" label="实际显示编码" width="130">
      </el-table-column>
      <el-table-column prop="airportCode" label="所属机场" min-width="150" :formatter="formatterAirport" show-overflow-tooltip>
      </el-table-column>
      <el-table-column prop="associatedGate" label="关联登机口" width="115">
      </el-table-column>
      <el-table-column prop="waitingHall" label="候机区" width="85">
      </el-table-column>
      <el-table-column prop="terminal" label="所属航站楼" width="115" :formatter="formatterTerminal">
      </el-table-column>
      <el-table-column prop="nature" label="区域" width="75" :formatter="baseUtil.formatterNature">
      </el-table-column>
      <el-table-column prop="direction" label="进港_出港" width="115" :formatter="baseUtil.formatterDirection">
      </el-table-column>
      <el-table-column prop="status" label="状态" width="75" :formatter="baseUtil.formatterStatus">
      </el-table-column>
      <el-table-column prop="remark" label="备注" min-width="130" show-overflow-tooltip>
      </el-table-column>
      <el-table-column prop="description" label="描述" min-width="130" show-overflow-tooltip>
      </el-table-column>
      <el-table-column prop="lastUpdated" label="最后更新时间" min-width="180">
      </el-table-column>
      <el-table-column label="操作" width="180" fixed="right" >
        <template scope="scope">
          <el-button size="small" @click="handleEdit(scope.$index, scope.row)"><span><i class="el-icon-edit"></i> 编辑 </span></el-button>
          <el-button size="small" @click="handleDel(scope.$index, scope.row)"><span><i class="el-icon-delete"></i> 删除 </span></el-button>
          <!-- <el-dropdown @command="handleCommand">
            <el-button size="small" >更多操作<i class="el-icon-caret-bottom el-icon--right"></i></el-button>
            <el-dropdown-menu slot="dropdown">
              <el-dropdown-item command="handleEdit" :index="scope.$index" :row="scope.row"><span><i class="el-icon-edit"></i> 编辑 </span></el-dropdown-item>
              <el-dropdown-item command="handleDel" :index="scope.$index" :row="scope.row"><span><i class="el-icon-delete"></i> 删除 </span></el-dropdown-item>
            </el-dropdown-menu>
          </el-dropdown> -->
        </template>
      </el-table-column>
    </el-table>

    <!--分页-->
    <pagination :to="getGateList" ref="page"></pagination>

    <!--新增界面-->
    <common-add-or-update
        type="add"
        :to="API.addGate().go"
        :callback="getGateList"
        :labelWidth="120"
        ref="addForm"></common-add-or-update>
    <!--编辑界面-->
    <common-add-or-update
        title="编辑"
        type="update"
        :to="API.editGate().go"
        :callback="getGateList"
        :labelWidth="120"
        ref="editForm"></common-add-or-update>
    <!--删除窗口-->
    <common-delete
        :to="API.removeGate().go"
        :callback="getGateList"
        :labelWidth="100"
        ref="delConfirm"></common-delete>
  </section>
</template>

<script>
  import Util from '../../common/js/util'
  import baseUtil from '../../common/js/base-util'
  import chooseDialog from './../../components/CommChooseGrid'
  import commonAddOrUpdate from './../../components/CommAddOrUpdate'
  import commonDelete from './../../components/CommDelete'
  import API from '../../api'
  import Pagination from '../../components/Pagination'

  export default {
    data () {
      return {
        filters: {
          gateCode: '',
          airportCode: ''
        },
        gates: [],
        tableHeight: 495,
        listLoading: false,
        sels: [],
        // 登录用户订阅的机场
        adminAirportChoose: [],
        // 航站楼数据，用于formatter
        terminals: [],
        // 关联登机口下拉框数据
        associatedGateChoose: [],
        // 所属机场的格式化以及编辑新增的时候用于选择
        airports: [],
        // 新增编辑需要的字段
        fields: [
          { name: 'id', value: '', hidden: true },
          { name: 'gateCode', value: '', label: '编码', type: 'text', rules: [ { max: 6, min: 1, required: true, message: '请输入一位到六位字符串的编码' } ], placeholder: '编码' },
          { name: 'displayCode', value: '', label: '实际显示编码', type: 'text', rules: [ { max: 4, min: 1, required: true, message: '请输入一位到四位字符串的实际显示编码' } ], placeholder: '实际编码' },
          { name: 'associatedGate', value: 0, label: '关联登机口', type: 'select', choose: [], rules: null, placeholder: '' },
          { name: 'waitingHall', value: '', label: '候机区', type: 'text', rules: [ { max: 4, min: 1, message: '候机区只能为一位到四位的字符串' } ], placeholder: '' },
          { name: 'terminal', value: '', label: '所属航站楼', type: 'select', choose: [], rules: [ { max: 4, min: 1, required: true, message: '请输入所属航站楼' } ], placeholder: '请输入所属航站楼' },
          { name: 'airportCode', value: '', label: '所属机场', type: 'selectExplain', choose: [], filterable: true, rules: null, placeholder: '' },
          { name: 'nature', value: '', label: '区域', type: 'select', choose: [ { text: '国际', value: 'I' }, { text: '国内', value: 'D' }, { text: '地区', value: 'R' } ], rules: [ { max: 1, min: 1, required: true, message: '请输入区域' } ], placeholder: '区域' },
          { name: 'isRemote', value: '', label: '是否远机位', type: 'select', choose: [ { text: '是', value: '1' }, { text: '否', value: '0' } ], rules: [ { required: true, message: '请选择是否远机位' } ], placeholder: '是否远机位' },
          { name: 'direction', value: '', label: '进港_出港', type: 'select', choose: [ { text: '出港', value: 'D' }, { text: '进港', value: 'A' } ], rules: [ { required: true, message: '请选择出港OR进港' } ], placeholder: '请选择' },
          { name: 'status', value: '', label: '状态', type: 'select', choose: [ { text: '可用', value: 'A' }, { text: '禁用', value: 'D' }, { text: '开放', value: 'O' }, { text: '关闭', value: 'C' } ], rules: null, placeholder: '请选择' },
          { name: 'remark', value: '', label: '备注', type: 'textarea', rules: [ { max: 100, min: 1, message: '备注只能为少于一百位的字符串' } ], placeholder: '' },
          { name: 'description', value: '', label: '描述', type: 'textarea', rules: [ { max: 50, min: 1, message: '描述只能为少于五十位的字符串' } ], placeholder: '' }
        ],
        API: API,
        baseUtil: baseUtil
      }
    },
    computed: {
      pageNumber () {
        return this.$refs['page'].get('pageNumber')
      },
      pageSize () {
        return this.$refs['page'].get('pageSize')
      }
    },
    components: {
      chooseDialog: chooseDialog,
      commonAddOrUpdate: commonAddOrUpdate,
      commonDelete: commonDelete,
      pagination: Pagination
    },
    methods: {
      // 获取用户列表
      getGateList () {
        let para = Object.assign({}, this.filters, this.$refs['page'].queryParam())
        this.listLoading = true
        API.getGateListPage().go(para).then((data) => {
          if (data.ok) {
            this.$refs['page'].set('total', data.attr.data.pager.recordCount)
            this.gates = data.attr.data.list
            this.filters.gateCode = ''
            this.filters.airportCode = ''
            // 创造数据用于提供下拉框数据
            this.associatedGateChoose = []
            for (var i = 0; i < this.gates.length; i++) {
              var item = {}
              item['text'] = this.gates[i].displayCode
              item['value'] = this.gates[i].gateCode
              this.associatedGateChoose.push(item)
            }
          } else {
            this.$notify(Util.notifyBody(false, data.msg))
          }
          this.listLoading = false
        })
      },
      selsChange: function (sels) {
        this.sels = sels
      },
      handleCommand: function (command, self) {
        var node = self.$vnode.data.attrs
        /* eslint-disable */
        eval('this.' + command).call(this, node.index, node.row)
        /* eslint-enable */
      },
      // 删除
      handleDel: function (index, row) {
        this.$refs['delConfirm'].del(row.id)
      },
      // 显示新增界面
      handleAdd: function () {
        this.fields[3].value = this.associatedGateChoose[0].value
        this.fields[3].choose = this.associatedGateChoose
        this.fields[5].choose = this.terminals
        this.fields[6].choose = this.adminAirportChoose
        if (this.adminAirportChoose.length === 1) {
          this.fields[6].value = this.adminAirportChoose[0].value
        }
        let addFields = Util.deepCopy(this.fields)
        this.$refs['addForm'].show(addFields)
      },
      // 显示编辑界面
      handleEdit: function (index, row) {
        this.fields[3].choose = this.associatedGateChoose
        this.fields[5].choose = this.terminals
        this.fields[6].choose = this.adminAirportChoose
        if (this.adminAirportChoose.length === 1) {
          this.fields[6].value = this.adminAirportChoose[0].value
        }
        let editFields = Util.deepCopy(this.fields)
        for (let i = 0; i < editFields.length; i++) {
          editFields[i].value = row[editFields[i].name]
        }
        this.$refs['editForm'].show(editFields)
      },
      // 获取航站楼信息列表
      getTerminalList: function (index, row) {
        let para = {
          id: ''
        }
        API.getTerminalListPage().go(para).then((data) => {
          var result = []
          for (var i = 0; i < data.attr.data.list.length; i++) {
            var item = {}
            item['text'] = data.attr.data.list[i].terminalCode
            item['value'] = data.attr.data.list[i].terminalCode
            result.push(item)
          }
          this.terminals = result
        })
      },
      // 格式化航站楼的代码
      formatterTerminal: function (row, column, cellValue) {
        for (var i = 0; i < this.terminals.length; i++) {
          if (this.terminals[i].value === cellValue) {
            return this.terminals[i].text
          }
        }
      },
      // 获取通用机场的列表
      getAirportList: function () {
        let para = {
          iatacode: '',
          icaocode: '',
          pageNumber: 1,
          pageSize: 10000
        }
        API.getAirportListPage().go(para).then((data) => {
          this.airports = Util.typedAirport(data.attr.data.list)
          // 筛选出登录用户的订阅机场
          var result = []
          var subscibeAirport = JSON.parse(sessionStorage.getItem('userStorage')).user.aiisAirports
          for (var i = 0; i < subscibeAirport.length; i++) {
            for (var j = 0; j < this.airports.length; j++) {
              if (subscibeAirport[i].airportCode === this.airports[j].value) {
                result.push(this.airports[j])
              }
            }
          }
          this.adminAirportChoose = result
          console.log('this.adminAirportChoose', this.adminAirportChoose)
        })
      },
      // 格式化机场的的代码
      formatterAirport: function (row, column, cellValue) {
        for (var i = 0; i < this.airports.length; i++) {
          if (this.airports[i].value === cellValue) {
            return this.airports[i].text1
          }
        }
      }
    },
    mounted () {
      this.getGateList()
      this.getTerminalList()
      this.getAirportList()
    }
  }

</script>

<style scoped>

</style>
