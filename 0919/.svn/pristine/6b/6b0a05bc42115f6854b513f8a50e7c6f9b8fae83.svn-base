/*
 * @Author: cdroid
 * @Date: 2017-04-17 15:04:00
 * @Last Modified by: chenyang
 * @Last Modified time: 2017-09-21 11:46:04
 * @Description: 通用新增或更新界面
 */

<template>
  <el-dialog :title="title" :visible.sync="visible" :close-on-click-modal="false" :before-close="handleBeforeClose" @close="handleClose" :size="size" >
    <el-form :model.sync="target" :rules="rules" ref="commonForm">
       <el-form-item v-for="formItem in fields" :key="formItem.id" v-if="!formItem.hidden">
          <el-col v-for="item in formItem.item" :key="item.name" :span="item.span">
             <el-form-item :label="item.label" :label-width="labelWidth + 'px'" :prop="item.name">
		        <el-input :type="item.type" v-model="target[item.name]" auto-complete="off" :disabled="item.disabled"
		        v-if="item.type === 'text' || item.type === 'textarea' || item.type === 'password'"></el-input>
		        <el-input :type="item.type" value="number" v-model.number="target[item.name]" auto-complete="off" v-else-if="item.type === 'number'" :v-show="item.show"></el-input>
		        <el-date-picker :type="item.type" v-model="target[item.name]" v-else-if="item.type === 'datetime'" >
		        </el-date-picker>
		        <el-radio-group v-model="target[item.name]" v-else-if="item.type === 'radio'">
		          <el-radio v-for="radioItem in item.choose" class="radio" :label="radioItem.value" :key="radioItem.value">{{radioItem.text}}</el-radio>
		        </el-radio-group>
		        <el-select @change="getSelectItem" class="selectA" v-model="target[item.name]" clearable :disabled="item.disabled" placeholder="请选择" :filterable="item.filterable" :multiple="item.multiple" v-else-if="item.type === 'select'">
		          <el-option
		            v-for="selectItem in item.choose"
		            :key="selectItem.value"
		            :label="selectItem.text"
		            :value="selectItem.value">
		          </el-option>
		        </el-select>
		        <el-select @change="getSelectItem" class="selectA" v-model="target[item.name]" clearable :disabled="item.disabled" placeholder="请选择" :filterable="item.filterable" :multiple="item.multiple" v-else-if="item.type === 'selectExplain'">
		          <el-option
		            v-for="selectItem in item.choose"
		            :key="selectItem.value"
		            :label="selectItem.text"
		            :value="selectItem.value">
		            <span style="float: left">{{ selectItem.text }}</span>
		            <span style="float: right; color: #8492a6; font-size: 13px">{{ selectItem.code }}</span>
		          </el-option>
		        </el-select>
		      </el-form-item>
          </el-col>
       </el-form-item>
    </el-form>
    <div slot="footer" class="dialog-footer">
        <el-button @click.native="visible = false">取消</el-button>
        <el-button @click="resetForm('commonForm')">重置</el-button>
        <el-button type="primary" @click.native="handleSubmit" :loading="loading">提交</el-button>
    </div>
  </el-dialog>
</template>
<script>
import util from './../../../common/js/util.js'
export default {
  props: {
    size: {
      type: String,
      default: 'small'
    },
    title: {
      type: String,
      default: '新增'
    },
    labelWidth: {
      type: Number,
      default: 80
    },
    to: {
      type: Function,
      default: function () {}
    },
    callback: {
      type: Function,
      default: function () {}
    }
  },
  data () {
    return {
      fields: [],
      visible: false,
      loading: false,
      target: {},
      rules: {},
      oldValue: {}
    }
  },
  methods: {
    show: function (fields) {
      this.loading = false
      this.visible = true
      this.fields = fields
      this.initTarget()
      this.initRules()
      this.oldValue = util.deepCopy(this.target)
    },
    initTarget: function () {
      this.target = {}
      let result = {}
      for (let i = 0; i < this.fields.length; i++) {
      	for (let j = 0; j < this.fields[i].item.length; j++) {
      		let field = this.fields[i].item[j]
      		result[field.name] = field.type === 'number' ? Number(field.value) : field.value
      	}
      }
      this.target = result
    },
    getSelectItem () {
      this.$emit('getSelectItem', this.target)
    },
    changeSelectChoose (index1, index2, data, key, value) {
      this.fields[index1].item[index2].choose = data
      this.target[key] = value
    },
    initRules: function () {
      this.rules = {}
      let result = {}
      for (let i = 0; i < this.fields.length; i++) {
      	for (let j = 0; j < this.fields[i].item.length; j++) {
      		if (this.fields[i].item[j].rules) {
	          result[this.fields[i].item[j].name] = this.fields[i].item[j].rules
	        }
      	}
      }
      this.rules = result
    },
    handleSubmit: function () {
      this.$refs['commonForm'].validate((valid) => {
        if (valid) {
          this.$confirm('确认提交吗？', '提示', {}).then(() => {
            this.loading = true
            // alert(JSON.stringify(this.target))
            let para = { newValue: this.target, oldValue: this.oldValue }
            if (para.newValue.updateStart) {
              para.newValue.updateStart = this.dateFormated(para.newValue.updateStart)
            }
            if (para.newValue.publishDate) {
              para.newValue.publishDate = this.dateFormated(para.newValue.publishDate)
            }
            // 这边的if语句不会影响到其他地方，因为根据agentCode来判断执行条件的
            if (para.newValue.agentCode) {
              para.newValue.clientAirline = para.newValue.clientAirline.join('/')
              para.oldValue.clientAirline = para.oldValue.clientAirline.join('/')
            }
            if (para.newValue.isvirtual) {
              para = { newValue: this.target }
            }
            this.to(para).then((res) => {
              this.loading = false
              this.$notify(util.notifyBody(res.ok, res.msg))
              this.$refs['commonForm'].resetFields()
              this.visible = false
              this.fields = []
              this.callback()
            })
          }).catch(() => {
            this.$message({
              type: 'info',
              message: '已取消提交'
            })
          })
        }
      })
    },
    dateFormated: function (date) {
      var dataFormated = null
      var moment = null
      moment = require('moment')
      dataFormated = moment(date).format('YYYY-MM-DD hh:mm:ss')
      return dataFormated
    },
    resetForm (formName) {
      this.$refs['commonForm'].resetFields()
      this.target = {}
      this.target = Object.assign({}, this.oldValue)
    },
    handleBeforeClose (done) {
      done()
    },
    handleClose () {
      this.$refs['commonForm'].resetFields()
      this.target = {}
    }
  }
}
</script>
<style>
.selectA {
  width: 100%;
}
/*空白会被浏览器识别*/
.el-select-dropdown__item span {
  white-space: pre;
}
</style>
