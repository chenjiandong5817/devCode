/*
 * @Author: chenyang
 * @Date: 2017-12-08 08:56:06
 * @Last Modified by: chenyang
 * @Last Modified time: 2017-12-12 11:41:37
 */

<template>
  <div>
    <el-dialog :visible.sync="dialogTableVisible" :close="reset">
      <div style="text-align:center;font-size:1.5em;"><span style="background-color:#bdeab2;font-family:Tahoma;">{{typeShow}}</span></div>
      </br>
      <pre v-show="adminOrNormal" id="adminText" style="font-size:1.0em;white-space: pre-wrap;word-wrap: break-word;border: 1px solid rgb(195, 195, 195)" class="sansserif2" contenteditable="true">{{editText}}</pre>
      <pre v-show="!adminOrNormal" id="normalText" style="font-size:1.0em;white-space: pre-wrap;word-wrap: break-word;border: 1px solid rgb(195, 195, 195)" class="sansserif2">{{editText}}</pre>
      </br>
      <span style="color:red;" v-show="adminOrNormal">{{`TIPS:&nbsp;&nbsp;`}}</span>
      <span style="color:red;" v-show="adminOrNormal">{{`编辑时如需撤销文本时可以使用CTRL + Z, 编辑完请提交。`}}</span>
      <el-button type="primary" style="float:right;margin-bottom:10px;" @click="submit" v-show="adminOrNormal">提交</el-button>
      <!-- <el-button type="primary" style="float:right;margin-bottom:10px;margin-right:10px;" @click="reset" v-show="adminOrNormal">重置原始文本</el-button> -->
    </el-dialog>
  </div>
</template>

<script>
import Util from '../../common/js/util'
import API from '../../api'
export default {
  props: {
    callback: {
      type: Function,
      default: function (text) { }
    }
  },
  data () {
    return {
      temp: '',
      adminOrNormal: false,
      typeShow: '',
      storeSourceId: '',
      editText: '', // 可以编辑的文本
      dialogTableVisible: false
    }
  },
  methods: {
    reset () {
      console.log(this.editText)
      document.getElementById('adminText').nodeValue = this.editText
    },
    normalShow (sourceId, label) {  // 普通用户填空编辑
      this.adminOrNormal = false
      this.typeShow = label
      let para = Object.assign({id: sourceId})
      API.getAfterModifyText().go(para).then((data) => {
        if (data.ok) {
          this.editText = data.attr.data.list[0].sql
          // console.log(this.editText)
          this.dialogTableVisible = true
        } else {
          this.$notify(Util.notifyBody(false, data.msg))
        }
      })
    },
    adminShow (sourceId, label) {  // 管理员编辑
      this.adminOrNormal = true
      this.typeShow = label
      // console.log(label)
      this.storeSourceId = sourceId
      this.dialogTableVisible = false
      let para = Object.assign({id: sourceId})
      API.getAfterModifyText().go(para).then((data) => {
        if (data.ok) {
          this.editText = data.attr.data.list[0].sql
          // console.log(this.editText)
          this.dialogTableVisible = true
        } else {
          this.$notify(Util.notifyBody(false, data.msg))
        }
      })
    },
    HTMLDecode (text) { // 反转义
      var temp = document.createElement('div')
      temp.innerHTML = text
      var output = temp.innerText || temp.textContent
      temp = null
      return output
    },
    submit () {
      if (this.adminOrNormal === true) {
        // console.log(this.editText)
        let finalStr = document.getElementById('adminText').innerHTML
        finalStr = this.HTMLDecode(finalStr)
        this.$confirm('确认提交吗？', '提示', {}).then(() => {
          let putObj = {id: this.storeSourceId, sql: finalStr}
          let para = Object.assign({newValue: putObj})
          API.editSourceData().go(para).then((data) => {
            if (data.ok) {
              this.$notify(Util.notifyBody(true, '修改成功'))
              this.dialogTableVisible = false
            } else {
              this.$notify(Util.notifyBody(false, data.msg))
            }
          })
        }).catch(() => {
          this.$message({
            type: 'info',
            message: '已取消提交'
          })
        })
      } else {
        this.callback(document.getElementById('normalText').innerHTML)
        console.log('这是用户编辑,还未做提交!')
      }
    }
  }
}
</script>

<style scoped>
.sansserif2
{
  width:auto;
  font-family:"Trebuchet MS", Arial, Helvetica, sans-serif;
  font-size:7px;
  color:#501b63;
  line-height:25px;
  letter-spacing:1px
}
</style>
