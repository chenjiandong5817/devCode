<template>
  <div class="tree-main">
    <el-row>
      <el-col :span="9" :offset="1">
        <div v-if="!list || list.length === 0">
          <el-button type="primary" size="mini" class="right-button" icon="plus" @click="templateSelectorVisible = true"></el-button>
        </div>
        <div v-else>
          <drag-tree :list="list" nameLabel="typeLabel" childrenLabel="children" moveSameLevel :addable="handleNodeAddable" removable editable @insertNode="handleInsertNode" @editNode="handleEditNode" @removeNode="handleRemoveNode"></drag-tree>
        </div>
      </el-col>
      <el-col :span="10" :offset="2">
        <pre>{{ JSON.stringify(sortList, null, 2) }}</pre>
      </el-col>
    </el-row>
    <el-dialog
      v-if="templateSelectorVisible"
      title="选择模板"
      :visible.sync="templateSelectorVisible"
      :close-on-click-modal="false"
      :close-on-press-escape="false"
      top="5vh"
      custom-class="select-template-dialog"
      :before-close="handleClose">
      <template-selector v-model="templateConf" :currentDataSource="currentClosetDataSource" :parentType="parentType"></template-selector>
      <span slot="footer" class="dialog-footer">
        <el-button @click="handleClose">取 消</el-button>
        <el-button type="primary" @click="handleSubmit">确 定</el-button>
      </span>
    </el-dialog>

  </div>
</template>
<script>
  import DragTree from '@/components/dragTree/DragTree'
  import TemplateSelector from './TemplateSelector'
  import Tools from '@/common/js/template-tools.js'
  export default {
    data () {
      return {
        list: [],
        templateSelectorVisible: false,
        templateConf: {},
        currentInsertParentNode: null,
        currentEditNode: null,
        currentClosetDataSource: null,
        parentType: null,
        isEditing: false
      }
    },
    computed: {
      sortList () {
        let sortList = this.moveChildren2End(this.list)
        this.filterParams(sortList)
        return sortList
      }
    },
    // watch: {
    //   templateConf: {
    //     handler (val) {
    //       console.log('conf of mainpage is change', val)
    //     },
    //     deep: true
    //   }
    // },
    components: {
      DragTree, TemplateSelector
    },
    methods: {
      // 树形组件调用的方法
      handleInsertNode (parent) {
        this.isEditing = false
        this.currentInsertParentNode = parent
        this.currentClosetDataSource = this.searchDataSource(parent)
        this.parentType = parent.type
        this.templateSelectorVisible = true
      },
      // 树形组件调用的方法
      handleEditNode (node) {
        this.isEditing = true
        this.currentEditNode = node
        this.templateConf = Tools.deepCopy(this.currentEditNode)
        this.currentClosetDataSource = this.searchDataSource(node)
        this.parentType = Tools.searchNodeParent(node, {name: '', children: this.list}).type
        this.templateSelectorVisible = true
        // console.log('edit')
      },
      // 树形组件调用的方法
      handleRemoveNode (node) {
        // console.log('delete')
      },
      handleSubmit () {
        this.templateSelectorVisible = false
        if (!Tools.isEmptyObject(this.templateConf)) {
          if (this.isEditing) {
            this.isEditing = false
            // Object.assign(this.currentEditNode, this.templateConf)
            // 先删除已经移除的旧属性
            let newKeys = Object.keys(this.templateConf)
            for (let key in this.currentEditNode) {
              if (!newKeys.includes(key)) {
                this.$delete(this.currentEditNode, key)
              }
            }
            Object.assign(this.currentEditNode, this.templateConf)
          } else {
            if (this.currentInsertParentNode) {
              // console.log(this.currentInsertParentNode)
              this.currentInsertParentNode.children.push(this.templateConf)
            } else {
              this.list.push(this.templateConf)
            }
            this.currentInsertParentNode = null
          }
        }
        this.templateConf = null
      },
      handleClose (done) {
        this.$confirm('确认取消本次操作？', '正在取消', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          this.templateSelectorVisible = false
          this.templateConf = null
        }).catch(() => {})
      },
      // 展示时，把children放到最后
      moveChildren2End (target) {
        let list = []
        for (let item of target) {
          let conf = {}
          for (let key in item) {
            if (key === 'children') {
              continue
            }
            conf[key] = item[key]
          }
          if (item.children) {
            conf.children = this.moveChildren2End(item.children)
          }
          list.push(conf)
        }
        return list
      },
      filterParams (target) {
        let keyFilters = ['collapsed', 'placeholder']
        for (let item of target) {
          for (let key in item) {
            if (item[key] instanceof Array) {
              this.filterParams(item[key])
            } else if (typeof item[key] === 'object') {
              this.filterParams([item[key]])
            } else if (keyFilters.includes(key)) {
              delete item[key]
            }
          }
        }
      },
      // 搜索最接近参数节点的数据源
      searchDataSource (node) {
        if (node.dataSource) {
          return node.dataSource
        } else {
          node = Tools.searchNodeParent(node, {name: '', children: this.list})
          if (node) {
            return this.searchDataSource(node)
          } else {
            return null
          }
        }
      },
      // 判断是否显示节点添加按钮
      handleNodeAddable (node) {
        return node.children
      }
    }
  }
</script>
<style>
.tree-main {
  position: relative;
  padding: 20px 15px;
  border-top: solid 1px #d1d2d4;
  border-bottom: solid 1px #d1d2d4;
  max-height: 900px;
  overflow-y: auto;
  overflow-x: hidden;
  background: #ddd;
  /* border-radius: 4px; */
}
pre {
  overflow: auto;
  display: block;
  padding: 9.5px;
  margin: 0 0 10px;
  font-size: 13px;
  line-height: 1.42857143;
  color: #333;
  word-break: break-all;
  word-wrap: break-word;
  background-color: #f5f5f5;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-family: Menlo,Monaco,Consolas,"Courier New",monospace;
  max-height: 700px;
  overflow-y: auto;
  overflow-x: auto;
}
.select-template-dialog {
  width: 665px;
}
</style>
