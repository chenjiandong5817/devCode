/*
 * @Author: ylj
 * @Date: 2017-12-01 12:57:20
 * @Last Modified by:   ylj
 * @Last Modified time: 2017-12-01 12:57:20 修改经停站样式
 */
<template>
<div class="flightFormclass">
  <div :class="addOrUpClss">
  <el-dialog :title="title" v-model="visible" :close-on-click-modal="false" @close="handleClose" :modal="false" @open="setReplaceList">
    <el-form :model="form.segment" ref="flightAddOrUpdateForm" >
      <el-row :gutter="10">
        <el-col :span="6">
          <el-form-item label="运营机场" prop="airportCode" :rules="[ { required: true, message: '请选择运营机场', trigger: 'blur' } ]">
            <city-name
              style="width: 100%;"
              ref="city"
              v-on:getAirportName = "setAirportCode"
              :disabled="editAble">
            </city-name>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item label="执行日期" prop="opDate" :rules="[ { required: true, message: '请选择执行日期', trigger: 'blur' } ]">
            <el-date-picker v-model="form.segment.opDate" placeholder="执行日期" style="width:100%;" format="yyyy-MM-dd" :picker-options="pickerOptions" :disabled="editAble"></el-date-picker>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item label="公司" prop="carrier" :rules="[ { required: true, message: '请选择公司', trigger: 'blur' } ]">
            <el-select v-model="form.segment.carrier" name="carrier" placeholder="公司" style="width:100%;" filterable :disabled="editAble">
              <el-option
                v-for="item in baseList.airlines"
                :key="item.icaocode"
                :label="item.cnname+'(' + item.iatacode + '/' + item.icaocode + ')'"
                :value="item.icaocode">
                <span style="float: left">{{ item.cnname }}</span>
                <span style="float: right">{{ item.iatacode + '/' + item.icaocode }}</span>
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item label="航班号" prop="flightNo" :rules="[ { required: true, message: '请填写航班号', trigger: 'blur' } ]">
            <el-input v-model="form.segment.flightNo" name="flightNo" style="width:100%;" placeholder="航班号" :disabled="editAble"></el-input>
          </el-form-item>
        </el-col>
      </el-row>

      <el-row :gutter="10">
        <el-col :span="6">
          <el-form-item label="任务" prop="flightTask" :rules="[ { required: true, message: '请选择任务', trigger: 'blur' } ]">
            <el-select v-model="form.segment.flightTask" placeholder="任务" filterable style="width:100%;"  filterable clearable  :disabled="editAble || operate === 'addAlt'">
              <el-option
                v-for="item in baseList.flighttasks"
                :key="item.id"
                :label="item.abbr2w + '(' + item.flightTaskCode + ')'"
                :value="item.flightTaskCode">
                <span style="float: left">{{ item.abbr2w }}</span>
                <span style="float: right">{{ item.flightTaskCode }}</span>
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item label="机号" prop="registration" :rules="[ { required: true, message: '请选择机号', trigger: 'blur' } ]">
            <el-select v-model="form.segment.registration" filterable remote :remote-method="regRemote" @change="setAircraftType" placeholder="机号" style="width:100%;" :disabled="editAble && operate !== 'flightAircraftChange'">
              <el-option
                v-for="item in registrations"
                :key="item.registration"
                :label="item.registration"
                :value="item.registration">
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item label="机型" prop="aircraftType" :rules="[ { required: true, message: '请选择机型', trigger: 'blur' } ]">
            <el-select v-model="form.segment.aircraftType" placeholder="机型" style="width:100%;" filterable remote :remote-method="airTypeRemote" :disabled="editAble && operate !== 'flightAircraftChange'">
              <el-option
                v-for="item in baseList.aircraftTypes"
                :key="item.sysCode"
                :label="item.sysCode"
                :value="item.sysCode">
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item label="进出" prop="direction" :rules="[ { required: true, message: '请选择进出', trigger: 'blur' } ]">
            <el-select v-model="form.segment.direction" name="direction" placeholder="进出" style="width:100%;" clearable  :disabled="directionDisable" filterable>
              <el-option
                v-for="item in baseList.flightdirections"
                :key="item.directionCode"
                :label="item.description"
                :value="item.directionCode">
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>
      </el-row>

      <el-row :gutter="10">
        <el-col :span="6">
          <el-form-item label="航站楼" prop="terminal" :rules="[ { required: true, message: '请选择航站楼', trigger: 'blur' } ]">
            <el-select v-model="form.segment.terminal" placeholder="航站楼" @change="setLink" style="width:100%;" filterable clearable  :disabled="editAble">
              <el-option
                v-for="item in baseList.terminals"
                :key="item.terminalCode"
                :label="item.terminalCode"
                :value="item.terminalCode">
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item label="总代" prop="generalAgent" :rules="[ { required: true, message: '请选择总代', trigger: 'blur' } ]">
            <el-select v-model="form.segment.generalAgent" placeholder="总代" style="width:100%;" filterable clearable  :disabled="editAble">
              <el-option
                v-for="item in baseList.generalagents"
                :key="item.agentCode"
                :label="item.description"
                :value="item.agentCode">
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item label="VIP" prop="vipTag">
            <el-select v-model="form.segment.vipTag" placeholder="VIP" style="width:100%;" filterable clearable :disabled="editAble">
              <el-option
                v-for="item in baseList.vipranks"
                :key="item.rankCode"
                :label="item.description"
                :value="item.rankCode">
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item label="状态" prop="flightStatus">
            <el-select v-model="form.segment.flightStatus" placeholder="状态" style="width:100%;" filterable clearable  :disabled="editAble || operate === 'addAlt'">
              <el-option
                v-for="item in baseList.flightstatus"
                :key="item.statusCode"
                :label="item.description + '(' + item.statusCode + ')'"
                :value="item.statusCode">
                <span style="float: left">{{ item.description }}</span>
                <span style="float: right">{{ item.statusCode }}</span>
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>
      </el-row>

      <!--只保存本站信息-->
      <el-row :gutter="10">
        <el-col :span="6">
          <el-form-item label="异常" prop="irregularStatus">
            <el-select v-model="form.segment.irregularStatus" placeholder="异常" style="width:100%;" filterable clearable  :disabled="editAble">
              <el-option
                v-for="item in baseList.flightstatus"
                :key="item.statusCode"
                :label="item.description + '(' + item.statusCode + ')'"
                :value="item.statusCode">
                <span style="float: left">{{ item.description }}</span>
                <span style="float: right">{{ item.statusCode }}</span>
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>

        <el-col :span="18" v-if="isShowIrrInfo">
          <el-form-item label="异常原因" prop="irrReason">
            <el-select v-model="form.irrReason" placeholder="异常原因" style="width: 100%;" filterable>
              <el-option
                v-for="item in baseList.irregularcodes"
                :key="item.irregularCode"
                :label="item.description"
                :value="item.irregularCode">
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>
      </el-row>

      <el-row :gutter="10" v-if="this.operate === 'addAlt' || this.operate === 'flightArrAlt' || this.operate === 'flightDepRtn'">
        <el-col :span="6">
          <el-form-item label="始发站" prop="origin" :rules="[ { required: true, message: '请选择始发站', trigger: 'blur' } ]">
            <el-select v-model="form.segment.origin" style="width:100%;" filterable placeholder="始发站" clearable  :disabled="editAble">
              <el-option
                v-for="item in baseList.airports"
                :key="item.icaocode"
                :label="item.cnabbr2w + '(' + item.icaocode + '/' + item.iatacode + ')'"
                :value="item.icaocode">
                <span style="float: left">{{ item.cnabbr2w }}</span>
                <span style="float: right">{{ item.icaocode + '/' + item.iatacode }}</span>
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item
            label="计划起飞时间"
            prop="scheduleDepartTime"
            :rules="[ { validator: Rules.validSegTimeType, message: '非法时间格式', trigger: 'blur'} ]">
            <date-time v-model="form.segment.scheduleDepartTime" :visitTime="true" :visitDate="true" :allDisable="this.operate === 'flightArrAlt'" dateStyle="width: 65%;" timeStyle="width: 32%;" datePlaceholder="计划起飞日期" timePlaceholder="时间" formatter="yyyy-MM-dd"></date-time>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item
            label="预计起飞时间"
            prop="estimateDepartTime"
            :rules="[ { validator: Rules.validSegTimeType, message: '非法时间格式', trigger: 'blur'} ]">
            <date-time v-model="form.segment.estimateDepartTime" :visitTime="true" :visitDate="true" :allDisable="this.operate === 'flightArrAlt'" dateStyle="width: 65%;" timeStyle="width: 32%;" datePlaceholder="预计起飞日期" timePlaceholder="时间" formatter="yyyy-MM-dd"></date-time>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item
            label="实际起飞时间"
            prop="actualDepartTime"
            :rules="[ { validator: Rules.validSegTimeType, message: '非法时间格式', trigger: 'blur'} ]">
            <date-time v-model="form.segment.actualDepartTime" :visitTime="true" :visitDate="true" :allDisable="this.operate === 'flightArrAlt'" dateStyle="width: 65%;" timeStyle="width: 32%;" datePlaceholder="实际起飞日期" timePlaceholder="时间" formatter="yyyy-MM-dd"></date-time>
          </el-form-item>
        </el-col>
      </el-row>

      <el-row :gutter="10" v-if="this.operate === 'addAlt'  || this.operate === 'flightArrAlt'  || this.operate === 'flightDepRtn'">
        <el-col :span="6">
          <el-form-item label="目的站" prop="destination" :rules="[ { required: true, message: '请选择目的站', trigger: 'blur' } ]">
            <el-select v-model="form.segment.destination" filterable placeholder="目的站" clearable style="width:100%;" :disabled="editAble">
              <el-option
                v-for="item in baseList.airports"
                :key="item.icaocode"
                :label="item.cnabbr2w + '(' + item.icaocode + '/' + item.iatacode + ')'"
                :value="item.icaocode">
                <span style="float: left">{{ item.cnabbr2w }}</span>
                <span style="float: right">{{ item.icaocode + '/' + item.iatacode }}</span>
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item
            label="计划到达时间"
            prop="scheduleArriveTime"
            :rules="[ { validator: Rules.validSegTimeType, message: '非法时间格式', trigger: 'blur'},
                      { validator: Rules.validSegTime, message: '时间配置错', preTime: form.segment.scheduleDepartTime, timeType: 'arrTime', trigger: 'change,blur' } ]">
            <date-time v-model="form.segment.scheduleArriveTime" :visitTime="true" :visitDate="true" :allDisable="this.operate === 'flightArrAlt'" dateStyle="width: 65%;" timeStyle="width: 32%;" datePlaceholder="计划到达日期" timePlaceholder="时间" formatter="yyyy-MM-dd" :rules="[ { required: true, message: '请填写到达时间', trigger: 'blur' } ]"></date-time>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item
            label="预计到达时间"
            prop="estimateArriveTime"
            :rules="[ { validator: Rules.validSegTimeType, message: '非法时间格式', trigger: 'blur'} ]">
            <date-time v-model="form.segment.estimateArriveTime" :visitTime="true" :visitDate="true" dateStyle="width: 65%;" timeStyle="width: 32%;" datePlaceholder="预计到达日期" timePlaceholder="时间" formatter="yyyy-MM-dd" :rules="[ { required: true, message: '请填写到达时间', trigger: 'blur' } ]"></date-time>
          </el-form-item>
        </el-col>

        <el-col :span="6">
          <el-form-item
            label="实际到达时间"
            prop="actualArriveTime"
            :rules="[ { validator: Rules.validSegTimeType, message: '非法时间格式', trigger: 'blur'} ]">
            <date-time v-model="form.segment.actualArriveTime" :visitTime="true" :visitDate="true" :allDisable="this.operate === 'flightArrAlt'"  dateStyle="width: 65%;" timeStyle="width: 32%;" datePlaceholder="实际到达日期" timePlaceholder="时间" formatter="yyyy-MM-dd" :rules="[ { required: true, message: '请填写到达时间', trigger: 'blur' } ]"></date-time>
          </el-form-item>
        </el-col>
      </el-row>

      <add-stop-over :isDiglogType="isDiglog"
        :to="params => { return this.addStopOverList(params) }"
        ref="stopOverForm"></add-stop-over>

      <el-row :gutter="10">
        <el-col :span="2">
          <el-form-item label-width="0px">
            <span>共享航班</span>
          </el-form-item>
        </el-col>

        <el-col :span="4" >
          <el-form-item label-width="0px">
            <el-input v-model="shareFlights" name="shareFlights" placeholder="共享航班" disabled></el-input>
          </el-form-item>
        </el-col>

        <el-col :span="4">
          <el-form-item>
            <el-button @click="showShareFlight" type="info" class="shareBtnCls" v-if="!shareAble" size="small">设置共享航班</el-button>
          </el-form-item>
        </el-col>
      </el-row>

      <div v-if="isDiglog === true && this.operate !== 'flightDepRtn'">
      <hr/>
      <el-row :gutter="5">
        <el-col :span="6">
          <el-form-item label-width="0px">
            <el-tag type="primary">航线设置 (北京时间) </el-tag>
          </el-form-item>
        </el-col>
      </el-row>
      <el-row :gutter="5" v-if="isEditAirline">
        <el-col :span="24">
          <el-form-item label-width="0px">
            <airline-form ref="airlineForm"></airline-form>
          </el-form-item>
        </el-col>
      </el-row>

      <el-row :gutter="10" v-else>
        <el-table v-bind:data="form.stopOverList" highlight-current-row v-loading="tableLoading" border style="width: 100%" :row-class-name="setRowClass" height="200" @current-change="handleCurrentChange" ref="stopOverTable" append >
          <!--<el-table-column prop="segmentIndex" label="顺序" width="45"></el-table-column>-->
          <el-table-column prop="origin" label="起飞地" width="160">
            <template scope="scope" >
              {{$cache.findByName('airports', 'icaocode', scope.row.origin, 'cnabbr2w')}}
            </template>
          </el-table-column>
          <el-table-column prop="destination" label="目的地" width="160">
            <template scope="scope" >
              {{$cache.findByName('airports', 'icaocode', scope.row.destination, 'cnabbr2w')}}
            </template>
          </el-table-column>
          <el-table-column prop="scheduleArriveTime" label="计划到达" :formatter="dateformat" width="83"></el-table-column>
          <el-table-column prop="estimateArriveTime" label="预计到达" :formatter="dateformat" width="83"></el-table-column>
          <el-table-column prop="actualArriveTime" label="实际到达" :formatter="dateformat" width="83"></el-table-column>
          <el-table-column prop="scheduleDepartTime" label="计划起飞" :formatter="dateformat" width="83"></el-table-column>
          <el-table-column prop="estimateDepartTime" label="预计起飞" :formatter="dateformat" width="83"></el-table-column>
          <el-table-column prop="actualDepartTime" label="实际起飞" :formatter="dateformat" min-width="83"></el-table-column>
        </el-table>
      </el-row>
      </div>

    </el-form>
    <div slot="footer" class="dialog-footer">
      <el-button @click.native="handleClose">取消</el-button>
      <el-button @click.native="resetForm('flightAddOrUpdateForm')" v-if="operate === 'Add' || operate === 'Edeit' || operate === 'flightArrAlt'">重置</el-button>
      <el-button type="primary" @click.native="handleSubmit" :loading="loading">提交</el-button>
    </div>

    <!--设置共享航班-->
    <share-flight
      :to="params => { return this.setShareFlightLs(params) }"
      ref="shareFlightForm"></share-flight>

  </el-dialog>
  </div>
</div>
</template>

<script>
import Util from '../../../common/js/util'
import Butil from '../../../common/js/base-util'
import Rules from '../../../common/js/rules'
import API from '../../../api'
import AddStopOver from '../dynamicFlightForm/AddStopOver'
import DynamicFlight from '../DynamicFlight'
import shareFlight from '../planFlightForm/ShareFlightForm'
import CityName from '../../../components/CityName'
import AirlineForm from './AirlineForm'
import DateTime from '../../../components/DateTime'

export default {
  props: {
    title: {
      type: String,
      default: '新增'
    },
    to: {
      type: Function,
      default: function () {}
    },
    callback: {
      type: Function,
      default: function () {}
    }
  },
  data () {
    return {
      addOrUpClss: 'normalClass',
      dialogClss: 'smallDigCls',
      isDiglog: true,
      editAble: false,
      visible: false,
      loading: false,
      operate: 'Add',
      optName: '',
      tableLoading: false,
      directionDisable: false,
      API: API,
      Rules: Rules,
      form: {
        segment: {
          id: null,
          flightId: null,
          linkedFlightId: null,
          combineFlightId: null,
          airportCode: null,
          direction: null,
          opDate: '',
          terminal: null,
          stand: null,
          boardingStand: null,
          vipTag: null,
          gate: null,
          generalAgent: null,
          carrier: null,
          flightNo: null,
          registration: null,
          aircraftType: null,
          flightStatus: null,
          flightTask: null,
          irregularStatus: null,
          origin: null,
          scheduleDepartTime: Util.formatDate.flightDateFmt('yyyy-MM-dd', new Date(), false),
          estimateDepartTime: Util.formatDate.flightDateFmt('yyyy-MM-dd', new Date(), false),
          actualDepartTime: Util.formatDate.flightDateFmt('yyyy-MM-dd', new Date(), false),
          destination: null,
          scheduleArriveTime: Util.formatDate.flightDateFmt('yyyy-MM-dd', new Date(), false),
          estimateArriveTime: Util.formatDate.flightDateFmt('yyyy-MM-dd', new Date(), false),
          actualArriveTime: Util.formatDate.flightDateFmt('yyyy-MM-dd', new Date(), false),
          segmentIndex: null,
          segmentNature: null,
          flightNature: null
        },
        stopOverList: [],
        irrReason: null
      },
      oldStopOverList: [],
      pickerOptions: {
        shortcuts: [{
          text: '昨天',
          onClick (picker) {
            const date = new Date()
            date.setTime(date.getTime() - 3600 * 1000 * 24)
            picker.$emit('pick', date)
          }
        }, {
          text: '今天',
          onClick (picker) {
            picker.$emit('pick', new Date())
          }
        }, {
          text: '明天',
          onClick (picker) {
            const date = new Date()
            date.setTime(date.getTime() + 3600 * 1000 * 24)
            picker.$emit('pick', date)
          }
        }]
      },
      currentSopOver: null,
      flightlist: [],
      oldflightlist: [],
      segmentNature1List: [],
      firstSeg: null,
      lastSeg: null,
      baseList: [],
      registrations: [],
      allRegistrationList: [],
      stopOver: {id: null, flightId: null, flightStatus: '', irregularStatus: '', boardingStand: '', stand: '', gate: '', index: 0, destination: '', flightNature: '', segmentNature: '', scheduleDepartTime: null, estimateDepartTime: null, actualDepartTime: null, scheduleArriveTime: null, estimateArriveTime: null, actualArriveTime: null},
      segList: [],
      editStopOverList: [],
      delStopOverList: [],
      isShowIrrInfo: false,
      curSelectRow: [],
      irrObj: {id: null, flightId: null, irregularStatus: null, irregularCode: null, publisher: null, localReason: null, remark: null},
      sysUserId: null,
      delIdList: [],
      subAirportLs: [],
      shareFlights: '',
      oldShareFlightLs: [],
      shareFlightLs: [],
      deleteShareIdList: []
    }
  },
  components: {
    addStopOver: AddStopOver,
    DynamicFlight: DynamicFlight,
    shareFlight: shareFlight,
    CityName: CityName,
    AirlineForm: AirlineForm,
    dateTime: DateTime
  },
  computed: {
    shareAble () {
      // 设置是否禁用共享航班设置按钮
      if (this.operate === 'Add' || this.operate === 'Edeit') {
        return false
      } else {
        return true
      }
    },
    isEditAirline () {
      // 是否编辑航线
      return this.operate === 'Add' || this.operate === 'Edeit' || this.operate === 'flightDly'
    }
  },
  methods: {
    setClassName: function () {
      this.addOrUpClss = ((this.operate !== 'Add' && this.operate !== 'addAlt') ? 'signClass' : 'normalClass') + (document.body.clientWidth <= 1366 ? ' largeDigCls' : ' smallDigCls')
    },
    show: function (row, airportCode) {
      this.showAirportInfo(this.subAirportLs)
      this.directionDisable = false
      if (row !== undefined && row !== null) {
        this.curSelectRow = Util.deepCopy(row)
        // 添加航班其他属性信息
        // this.operate = 'Edeit
        this.form.segment = Object.assign({}, this.form.segment, row)
        this.setAirportInfo(this.form.segment.airportCode)
        this.directionDisable = true
        this.loading = true
        let para = { pageSize: 0, flightId: row.flightId }
        API.getDynamicFlight().go(para).then((data) => {
          if (data.ok) {
            this.oldflightlist = data.attr.data.list
            // 实航段
            let list = this.oldflightlist.filter(item => {
              return item.segmentNature !== 0
            })
            // 按segmentIndex排序
            list.sort(function (a, b) {
              return a.segmentIndex - b.segmentIndex
            })
            this.segmentNature1List = Util.deepCopy(list)
            // 绑定显示字段数据
            this.firstSeg = Util.deepCopy(this.segmentNature1List[0])
            this.lastSeg = Util.deepCopy(this.segmentNature1List[this.segmentNature1List.length - 1])
            this.bindSegment()
            // 绑定经停站
            this.bindStopOverLs()
            // 设置共享航班信息
            this.shareFlightLs = data.attr.data.shareFlightLs
            if (data.attr.data.isShareFlight) {
              this.shareFlightLs = data.attr.data.shareFlightLs
            } else {
              this.shareFlights = ''
              this.shareFlightLs = []
            }
            this.oldShareFlightLs = Util.deepCopy(this.shareFlightLs)
            this.setShareFlightInfo()
          } else {
            this.$notify(Util.notifyBody(false, data.msg))
          }
          this.visible = true
          this.loading = false
        })
      } else {
        // this.operate = 'Add'
        // 新增设置默认值为空、航班设置日期默认当前日期
        this.initData(airportCode)
        this.setDefauleDate()
        this.bindStopOverLs()
      }
      this.visible = true
      this.loading = false
    },
    bindSegment: function () {
      // 绑定本站航段信息
      this.form.segment = Util.deepCopy(this.firstSeg)
      this.form.segment.destination = this.lastSeg.destination
      this.form.segment.scheduleArriveTime = this.lastSeg.scheduleArriveTime
      this.form.segment.estimateArriveTime = this.lastSeg.estimateArriveTime
      this.form.segment.actualArriveTime = this.lastSeg.actualArriveTime
      if (this.form.segment.direction === 'A') {
        this.form.segment.flightStatus = this.lastSeg.flightStatus
        this.form.segment.irregularStatus = this.lastSeg.irregularStatus
        this.form.segment.boardingStand = this.lastSeg.boardingStand
        this.form.segment.stand = this.lastSeg.stand
        this.form.segment.gate = this.lastSeg.gate
      }
    },
    bindStopOverLs: function () {
      this.$nextTick(() => {
        if (this.isEditAirline) {
          if (this.segmentNature1List.length > 0) {
            this.$refs['airlineForm'].show(true, this.operate, this.form.segment, this.segmentNature1List)
          } else {
            this.$refs['airlineForm'].show(true, this.operate, this.form.segment)
          }
          let obj = this.$refs['airlineForm'].getAirlineList()
          this.form.stopOverList = obj.newAirline
          this.oldStopOverList = obj.oldAirlineList
        } else {
          this.form.stopOverList = Util.deepCopy(this.segmentNature1List)
        }
      })
    },
    initData: function (airportCode) {
      for (var key in this.form.segment) {
        this.form.segment[key] = null
      }
      if (airportCode !== undefined) {
        // 设置航班运营机场
        this.setAirportInfo(airportCode)
        this.form.segment.airportCode = airportCode
      }
      if (this.operate === 'addAlt') {
        // 新增备降，设置经停站(与用户管辖权限进行绑定) 任务备降
        this.directionDisable = true
        this.form.segment.flightTask = 'A/N'
        // 0828 经停站显示
        this.visible = true
        this.$nextTick(() => {
          this.$refs['stopOverForm'].initData()
          this.$refs['stopOverForm'].setDefaultDate()
          this.$refs['stopOverForm'].stopOver.destination = airportCode
          this.$refs['stopOverForm'].destinationDisable = true
          this.$refs['stopOverForm'].index = this.form.stopOverList.length + 1
        })
      } else {
        this.form.stopOverList = []
      }
      this.shareFlights = ''
      this.oldShareFlightLs = []
      this.shareFlightLs = []
      this.curSelectRow = []
      this.form.irrReason = null
      this.irrReason = null
      this.delIdList = []
    },
    setDefauleDate: function () {
      let nowDate = Util.formatDate.flightDateFmt('yyyy-MM-dd', new Date(), false)
      this.form.segment.opDate = nowDate
      this.form.segment.scheduleDepartTime = nowDate
      this.form.segment.estimateDepartTime = nowDate
      this.form.segment.actualDepartTime = nowDate
      this.form.segment.scheduleArriveTime = nowDate
      this.form.segment.estimateArriveTime = nowDate
      this.form.segment.actualArriveTime = nowDate
    },
    handleClose: function () {
      this.visible = false
      this.editAble = false
      this.delIdList = []
      this.shareFlightLs = []
      this.deleteShareIdList = []
      this.delStopOverIdLs = []
      // this.$refs['flightAddOrUpdateForm'].resetFields()
      // this.$refs['airlineForm'].initData()
    },
    handleSubmit: function () {
      if (this.operate === 'Add' || this.operate === 'Edeit') {
        // 新增或编辑操作
        this.handAddOrUptSubmit()
      } else if (this.operate === 'flightArrAlt') {
        // 进港备降提交
        this.addFlightArrAltSubmit()
      } else if (this.operate === 'addAlt') {
        // 新增备降提交
        this.addFlightAltSubmit()
      } else if (this.operate === 'flightDepRtn') {
        // 出港返航提交
        this.handFlightDepRtn()
      } else {
        this.handFlightSimpleCommand()
      }
    },
    handFlightSimpleCommand: function () {
      // 异常原因登记操作
      let newFlightls = []
      let oldFlightls = []
      let irrReason = {id: null, flightId: this.curSelectRow.id, irregularStatus: null, irregularCode: this.form.irrReason, publisher: this.sysUserId, localReason: null, remark: null}
      let para = {}
      let isNeedIrregular = false
      oldFlightls[0] = Util.deepCopy(this.curSelectRow)
      newFlightls[0] = Util.deepCopy(this.curSelectRow)
      switch (this.operate) {
        case 'flightCnl': {
          newFlightls[0].flightStatus = 'CNL'
          newFlightls[0].irregularStatus = 'CNL'
          // 获取当前用户信息 待修整 0822
          irrReason.irregularStatus = 'CNL'
          isNeedIrregular = true
          para = Object.assign({}, para, {irregularInfo: irrReason})
          break
        }
        case 'flightDly': {
          newFlightls[0].irregularStatus = 'DLY'
          irrReason.irregularStatus = 'DLY'
          isNeedIrregular = true
          para = Object.assign({}, para, {irregularInfo: irrReason})
          break
        }
        case 'flightAircraftChange': {
          newFlightls[0].registration = this.form.segment.registration
          newFlightls[0].aircraftType = this.form.segment.aircraftType
          break
        }
        case 'flightArrRtn': {
          newFlightls[0].flightStatus = null
          newFlightls[0].irregularStatus = 'RTN'
          newFlightls[0].actualDepartTime = null
          newFlightls[0].estimateArriveTime = null
          irrReason.irregularStatus = 'RTN'
          isNeedIrregular = true
          para = Object.assign({}, para, {irregularInfo: irrReason})
          break
        }
        default: break
      }

      para = Object.assign({}, para, { newValue: newFlightls, oldValue: oldFlightls, operate: this.operate, isNeedIrregular: isNeedIrregular })
      this.$refs['flightAddOrUpdateForm'].validate((valid) => {
        if (valid) {
          this.$confirm('确认提交吗？', '提示', {}).then(() => {
            this.loading = true
            API.operateFlightData(this.operate, this.optName).go(para).then((data) => {
              this.loading = false
              this.$notify(Util.notifyBody(data.ok, data.msg))
              this.resetForm('flightAddOrUpdateForm')
              this.visible = false
              this.callback()
            })
          }).catch(() => {
            this.$message({
              type: 'info',
              message: '已取消提交'
            })
          })
        }
      })
    },
    handAddOrUptSubmit: function () {
      // 设置航段信息（实航段 + 虚航段） 1203
      let segList = Util.deepCopy(this.$refs['airlineForm'].getAirlineList().newAirline)
      let segLength = segList.length
      this.flightlist = []
      for (var x = 0; x < segList.length; x++) {
        // 1. 设置实航段信息
        let s = Object.assign({}, Util.deepCopy(this.form.segment), segList[x])
        s.segmentNature = (s.segmentNature === '' ? '1' : s.segmentNature)
        s.segmentIndex = x
        // 设置本站航段信息
        s = Object.assign(s, this.bindCurStation(s, x, segLength))
        this.flightlist.push(s)
        // 2. 设置虚航段信息
        for (var j = x + 1; j < segList.length; j++) {
          let s = Object.assign({}, Util.deepCopy(this.form.segment), segList[j])
          // 设置虚航段信息
          s.id = null
          s.origin = segList[x].origin
          s.scheduleDepartTime = segList[x].scheduleDepartTime
          s.estimateDepartTime = segList[x].estimateDepartTime
          s.actualDepartTime = segList[x].actualDepartTime
          s.segmentNature = '0'
          s.segmentIndex = 0
          // 设置本站航段信息
          s = Object.assign(s, this.bindCurStation(s, j, segLength))
          this.flightlist.push(s)
        }
      }
      // 获取删除航段信息
      this.delIdList = this.$refs['airlineForm'].delStopOverIdLs
      var para = { newValue: this.flightlist, oldValue: this.oldflightlist, deleteIdList: this.delIdList, shareFlightLs: this.shareFlightLs, deleteShareIdList: this.deleteShareIdList }
      let airlineValid = this.$refs['airlineForm'].airlineValid()
      this.$refs['flightAddOrUpdateForm'].validate((valid) => {
        if (valid && airlineValid) {
          this.$confirm('确认提交吗？', '提示', {}).then(() => {
            this.loading = true
            this.to(para).then((res) => {
              this.loading = false
              this.$notify(Util.notifyBody(res.ok, res.msg))
              this.resetForm('flightAddOrUpdateForm')
              this.visible = false
              this.callback()
            })
          }).catch(() => {
            this.$message({
              type: 'info',
              message: '已取消提交'
            })
          })
        }
      })
    },
    bindCurStation (segment, index, segLength) {
      // 若为本站航班，设置本站的状态、异常
      let obj = {}
      if ((segment.direction === 'A' && index === segLength - 1) || (segment.direction === 'D' && index === 0)) {
        obj['flightStatus'] = this.form.segment.flightStatus
        obj['irregularStatus'] = this.form.segment.irregularStatus
      } else {
        obj['flightStatus'] = this.form.segment.flightStatus
        obj['irregularStatus'] = this.form.segment.irregularStatus
      }
      return obj
    },
    regRemote: function (query) {
      if (query !== '' && query !== null && query !== undefined) {
        let para = {pageSize: 99999}
        API.searchReg(query.toLowerCase()).go(para).then((data) => {
          this.registrations = data.list
        })
      } else {
        this.registrations = []
      }
    },
    airTypeRemote: function (query) {
      if (query !== '' && query !== null && query !== undefined) {
        this.loading = true
        setTimeout(() => {
          this.loading = false
          let allAirTypeList = this.$cache.fetch('aircraftTypes')
          this.baseList.aircraftTypes = allAirTypeList.filter(item => {
            return item.sysCode !== '' && item.sysCode !== null && item.sysCode.toLowerCase().indexOf(query.toLowerCase()) > -1
          })
        }, 200)
      } else {
        this.baseList.aircraftTypes = []
      }
    },
    handleCurrentChange (val) {
      this.currentSopOver = val
    },
    addStopOverList (stopover) {
      // 新增经停
      if (stopover !== undefined) {
        let data = Util.deepCopy(this.form.stopOverList)
        data[stopover.index - 1] = Object.assign({}, data[stopover.index - 1], stopover)
        this.form.stopOverList = data
        return {
          ok: true,
          msg: '成功'
        }
      } else {
        return {
          ok: false,
          msg: '失败'
        }
      }
    },
    resetForm (formName) {
      // this.form = {
      //   segment: {
      //     airportCode: null,
      //     direction: null,
      //     opDate: '',
      //     terminal: null,
      //     stand: null,
      //     boardingStand: null,
      //     vipTag: null,
      //     gate: null,
      //     generalAgent: null,
      //     carrier: null,
      //     flightNo: null,
      //     registration: null,
      //     aircraftTypes: null,
      //     flightStatus: null,
      //     flightTask: null,
      //     irregularStatus: null,
      //     origin: null,
      //     scheduleDepartTime: null,
      //     scheduleDepartDate: null,
      //     scheduleDepTime: null,
      //     estimateDepartTime: null,
      //     estimateDepartDate: null,
      //     estimateDepTime: null,
      //     actualDepartTime: null,
      //     actualDepartDate: null,
      //     actualDepTime: null,
      //     destination: null,
      //     scheduleArriveTime: null,
      //     scheduleArriveDate: null,
      //     scheduleArrTime: null,
      //     estimateArriveTime: null,
      //     estimateArriveDate: null,
      //     estimateArrTime: null,
      //     actualArriveTime: null,
      //     actualArriveDate: null,
      //     actualArrTime: null,
      //     segmentIndex: null,
      //     segmentNature: null,
      //     flightNature: null
      //   },
      //   stopOverList: [],
      //   irrReason: null
      // }
      // 1203
      this.$refs[formName].resetFields()
      // 重置航线列表、共享航班
      if (this.oldStopOverList.length > 0) {
        this.from.stopOverList = Util.deepCopy(this.oldStopOverList)
      } else {
        let array = []
        array.push(Util.deepCopy(this.stopOver))
        this.form.stopOverList = array
      }
      this.shareFlightLs = Util.deepCopy(this.oldShareFlightLs)
      this.setShareFlightInfo()
      this.$refs['airlineForm'].resetForm()
      // 以下重置方法为撤回至初始状态
      // this.$refs[formName].resetFields()
      // this.form.stopOverList = []
      // this.form.irrReason = null
    },
    setAircraftType: function (val) {
      let list = []
      list = this.registrations.filter(item => {
        return item.registration === val
      })
      if (list.length > 0) {
        this.form.segment.aircraftType = list[0].aircraftType
      }
    },
    showCurFlight: function (row) {
      this.directionDisable = false
      this.showAirportInfo(this.subAirportLs)
      if (row !== undefined) {
        this.curSelectRow = Util.deepCopy(row)
        this.setAirportInfo(this.curSelectRow.airportCode)
        this.directionDisable = true
        this.loading = true
        this.firstSeg = null
        this.lastSeg = null
        this.form.segment = Object.assign({}, this.form.segment, row)
        this.form.segment.irregularStatus = 'ALT'
        this.form.segment.flightStatus = null
        this.form.segment.estimateArriveTime = null
        this.form.stopOverList = []
        // 进港备降经停站显示 0828
        this.form.irrReason = null
        this.loading = false
      }
      this.visible = true
      this.$nextTick(() => {
        this.$refs['stopOverForm'].initData()
        this.$refs['stopOverForm'].setDefaultDate()
        this.$refs['stopOverForm'].destinationDisable = false
        this.$refs['stopOverForm'].index = this.form.stopOverList.length + 1
      })
    },
    showFlightDepRtn: function (row, airportCode) {
      // 出港返航编辑界面展示 0821
      this.curSelectRow = Util.deepCopy(row)
      this.showAirportInfo(this.subAirportLs)
      this.setAirportInfo(this.curSelectRow.airportCode)
      this.oldflightlist[0] = row
      this.directionDisable = true
      this.loading = true
      this.firstSeg = null
      this.lastSeg = null
      this.form.segment = Object.assign({}, this.form.segment, this.curSelectRow)
      this.form.segment.origin = airportCode
      this.form.segment.destination = airportCode
      this.form.segment.direction = 'A'
      this.form.segment.flightTask = 'F/H'
      this.form.segment.irregularStatus = 'RTN'

      let now = new Date()
      let moment = require('moment')
      let datetime = Util.formatDate.format(now, 'yyyy-MM-dd hh:mm:ss')
      // 设置计划到达时间-延迟10分钟
      let scheduleArriveTime = moment(new Date(datetime)).add(10, 'minutes').format('YYYY-MM-DD HH:mm:ss')
      this.form.segment.scheduleDepartTime = datetime
      this.form.segment.scheduleArriveTime = scheduleArriveTime
      this.form.stopOverList = []
      this.form.irrReason = null
      this.loading = false
      this.visible = true
    },
    addFlightArrAltSubmit: function () {
      // 进港备降
      let newFlightls = []
      let oldFlightls = []
      oldFlightls[0] = Util.deepCopy(this.curSelectRow)
      newFlightls[0] = Util.deepCopy(this.curSelectRow)
      newFlightls[0].flightStatus = null
      newFlightls[0].irregularStatus = 'ALT'
      newFlightls[0].estimateArriveTime = null
      newFlightls[0].segmentNature = '0'
      // 新增航段 1.原起始-备降 2 备降-原目的 航段属性2
      newFlightls[1] = Util.deepCopy(this.curSelectRow)
      newFlightls[2] = Util.deepCopy(this.curSelectRow)

      // 0828 设置经停站信息
      this.setStopOverFormDate()
      newFlightls[1].destination = this.form.stopOverList[0].destination
      newFlightls[1].scheduleArriveTime = this.form.stopOverList[0].scheduleArriveTime
      newFlightls[1].estimateArriveTime = this.form.stopOverList[0].estimateArriveTime
      newFlightls[1].actualArriveTime = this.form.stopOverList[0].actualArriveTime
      newFlightls[1].segmentNature = '2'
      newFlightls[1].segmentIndex = this.curSelectRow.segmentIndex

      newFlightls[2].origin = this.form.stopOverList[0].destination
      newFlightls[2].flightStatus = null
      newFlightls[2].scheduleDepartTime = this.form.stopOverList[0].scheduleDepartTime
      newFlightls[2].estimateDepartTime = this.form.stopOverList[0].estimateDepartTime
      newFlightls[2].actualDepartTime = this.form.stopOverList[0].actualDepartTime
      newFlightls[2].segmentNature = '2'
      newFlightls[2].segmentIndex = this.curSelectRow.segmentIndex + 1

      let irrReason = {id: null, flightId: this.curSelectRow.id, irregularStatus: 'ALT', irregularCode: this.form.irrReason, publisher: this.sysUserId, localReason: null, remark: null}
      let para = { irregularInfo: irrReason, firstFlight: newFlightls[1], secondFlight: newFlightls[2] }
      this.$refs['flightAddOrUpdateForm'].validate((valid) => {
        if (valid) {
          this.$confirm('确认提交吗？', '提示', {}).then(() => {
            this.loading = true
            API.operateFlightArrAlt().go(para).then((res) => {
              this.loading = false
              this.$notify(Util.notifyBody(res.ok, res.msg))
              this.initData()
              this.visible = false
              this.callback()
            })
          }).catch(() => {
            this.$message({
              type: 'info',
              message: '已取消提交'
            })
          })
        }
      })
    },
    setStopOverFormDate: function () {
      // 0828
      this.$refs['stopOverForm'].setStopOver()
      this.addStopOverList(this.$refs['stopOverForm'].stopOver)
    },
    addFlightAltSubmit: function () {
      // 新增备降0828
      let airportCode = this.form.segment.airportCode
      this.setStopOverFormDate()

      let newFlightls = []
      let newSegmentlist = [{flightTask: 'A/N', destination: airportCode, direction: 'A', flightStatus: 'ENR', scheduleArriveTime: this.form.stopOverList[0].scheduleArriveTime, estimateArriveTime: this.form.stopOverList[0].estimateArriveTime, actualArriveTime: this.form.stopOverList[0].actualArriveTime, segmentNature: 1},
                            {flightTask: 'A/N', origin: airportCode, direction: 'D', flightStatus: null, scheduleDepartTime: this.form.stopOverList[0].scheduleDepartTime, estimateDepartTime: this.form.stopOverList[0].estimateDepartTime, actualDepartTime: this.form.stopOverList[0].actualDepartTime, segmentNature: 1}]

      newFlightls[0] = Util.deepCopy(this.form.segment)
      newFlightls[0] = Object.assign({}, newFlightls[0], newSegmentlist[0])
      newFlightls[0].flightNature = this.setFlightNature(newFlightls[0].destination)
      newFlightls[1] = Util.deepCopy(this.form.segment)
      newFlightls[1] = Object.assign({}, newFlightls[1], newSegmentlist[1])
      newFlightls[1].flightNature = this.setFlightNature(newFlightls[1].destination)
      this.oldflightlist = []
      // 新增备降需测试第三个参数、无需虚航段 0827
      let irrReason = {id: null, flightId: null, irregularStatus: 'ALT', irregularCode: this.form.irrReason, publisher: this.sysUserId, localReason: null, remark: null}
      let para = { irregularInfo: irrReason, firstFlight: newFlightls[0], secondFlight: newFlightls[1] }
      this.$refs['flightAddOrUpdateForm'].validate((valid) => {
        if (valid) {
          this.$confirm('确认提交吗？', '提示', {}).then(() => {
            this.loading = true
            API.operateFlightAddAlt().go(para).then((res) => {
              this.loading = false
              this.$notify(Util.notifyBody(res.ok, res.msg))
              this.initData()
              this.visible = false
              this.callback()
            })
          }).catch(() => {
            this.$message({
              type: 'info',
              message: '已取消提交'
            })
          })
        }
      })
    },
    handFlightDepRtn: function () {
      // 出港返航提交处理
      // 设置航班时间
      let objid = {id: null, flightId: null, linkedFlightId: null, combineFlightId: null}
      let irrReason = {id: null, flightId: this.curSelectRow.id, irregularStatus: 'RTN', irregularCode: this.form.irrReason, publisher: this.sysUserId, localReason: null, remark: null}
      let para = {}
      let estArrTime = null
      let firstFlight = {}
      let secondFlight = {}
      firstFlight = Object.assign({}, Util.deepCopy(this.curSelectRow), this.form.segment, objid)
      secondFlight = Util.deepCopy(this.curSelectRow)

      if (this.form.segment.estimateArriveTime !== '' && this.form.segment.estimateArriveTime !== null) {
        estArrTime = new Date(this.form.segment.estimateArriveTime.replace('-', '/'))
        estArrTime = estArrTime.setHours(estArrTime.getHours() + 1)
        estArrTime = Util.formatDate.format(new Date(estArrTime), 'yyyy-MM-dd hh:mm:ss')
      }
      secondFlight.scheduleDepartTime = estArrTime

      para = Object.assign({}, para, { firstFlight: firstFlight, secondFlight: secondFlight, irregularInfo: irrReason })
      this.$refs['flightAddOrUpdateForm'].validate((valid) => {
        if (valid) {
          this.$confirm('确认提交吗？', '提示', {}).then(() => {
            this.loading = true
            API.operateFlightDepRtn().go(para).then((res) => {
              this.loading = false
              this.$notify(Util.notifyBody(res.ok, res.msg))
              this.initData()
              this.visible = false
              this.callback()
            })
          }).catch(() => {
            this.$message({
              type: 'info',
              message: '已取消提交'
            })
          })
        }
      })
    },
    dateformat: function (row, column, cellValue) {
      let date = row[column.property]
      if (date === undefined || date === null || date === '') {
        return ''
      } else {
        // return Util.formatDate.format(new Date(date), 'yyyy-MM-dd hh:mm')
        return Util.formatDate.flightDateFmt('hhmm', date, true, this.form.segment.opDate)
      }
    },
    setFlightNature: function (destination) {
      // 0828 设置航班属性
      let obj = this.baseList.airports.find((item) => {
          return item.icaocode === destination
      })
      return obj !== undefined ? obj.airportnature : null
    },
    setReplaceList: function () {
      this.loading = true
      // 0910 从缓存中获取基础表信息
      let tkeys = ['airports', 'flightdirections', 'generalagents', 'airlines', 'terminals', 'flighttasks', 'irregularcodes', 'flightstatus', 'aircraftTypes', 'stand', 'gate', 'vipranks']
      for (var i = 0; i < tkeys.length; i++) {
        this.baseList[tkeys[i]] = this.$cache.fetch(tkeys[i])
        if (i === tkeys.length - 1) {
          this.loading = false
        }
      }
      this.setClassName()
    },
    toUpper: function (val) {
      this.form.segment.flightTask = val.key.toUpperCase()
    },
    setRowClass: function (row, index) {
      if (row.segmentNature === 3) {
        return 'segmetCnl-row'
      } else {
        return 'segmetNormal-row'
      }
    },
    showShareFlight () {
      // 展示共享航班编辑界面
      let curSegList = this.setCurSegmentList()
      this.$refs['shareFlightForm'].show(curSegList, this.shareFlightLs)
    },
    setCurSegmentList () {
      // 拼接本场航段
      let list = []
      let origin = this.$cache.findByName('airports', 'icaocode', this.form.segment.origin, 'cnabbr2w') + '(' + this.form.segment.origin + ')'
      let last = this.$cache.findByName('airports', 'icaocode', this.form.segment.destination, 'cnabbr2w') + '(' + this.form.segment.destination + ')'
      for (var i = 0; i < this.form.stopOverList.length; i++) {
        let seg = {}
        let name = this.$cache.findByName('airports', 'icaocode', this.form.stopOverList[i].destination, 'cnabbr2w')
        let destination = name + '(' + this.form.stopOverList[i].destination + ')'
        seg = { segmentName: origin + '-' + destination, origin: this.form.segment.origin, destination: this.form.stopOverList[i].destination }
        list.push(seg)
      }
      list[this.form.stopOverList.length] = { segmentName: origin + '-' + last, origin: this.form.segment.origin, destination: this.form.segment.destination }
      return list
    },
    setShareFlightInfo () {
      // 拼接共享航班文本信息
      let t = ''
      for (var i = 0; i < this.shareFlightLs.length; i++) {
        let c = i === 0 ? '' : '/'
        t += c + this.shareFlightLs[i].carrier + this.shareFlightLs[i].flightNo
      }
      this.shareFlights = t
    },
    setShareFlightLs (params) {
      // 保存共享航班信息
      this.shareFlightLs = Util.deepCopy(params.shareFlightLs)
      this.deleteShareIdList = Util.deepCopy(params.deleteShareIdList)
      this.setShareFlightInfo()
    },
    setLink (val) {
      this.baseList.gate = this.$cache.fetch('gate').filter(item => {
        return item.terminal === val
      })
    },
    setAirportCode (airportCode) {
      this.form.segment.airportCode = airportCode
    },
    showAirportInfo (subAirportLs) {
      this.$nextTick(() => {
        this.$refs['city'].setCitys(subAirportLs)
      })
    },
    setAirportInfo (airportCode) {
      this.$nextTick(() => {
        this.$refs['city'].airportCode = airportCode
      })
    }
  },
  mounted () {
    var storage = this.$store.getters.getUserStorage
    this.sysUserId = storage.user.id
    this.subAirportLs = Butil.getSubscribeAirports()
    // 自适应浏览器窗口大小
    window.addEventListener('resize', this.setClassName)
  }
}

</script>
<style lang="scss">
.flightFormclass {
  .el-dialog__body {
    padding: 5px 20px;
  }
  .el-form-item {
    margin-bottom: 8px;
  }

  .el-table .segmetCnl-row {
    background: #e2f0e4;
  }

  .el-table .segmetNormal-row {
    background: #ffffff;
  }

  .smallDigCls {
    .el-dialog--small {
      width: 50%!important;
    }
  }

  .largeDigCls {
    .el-dialog--small {
      width: 70%!important;
    }
  }
  .el-dialog {
    margin-top: -6%!important;
  }
  .el-table {
    margin-left: 0px!important;
    margin-right: 0px!important;
  }
  .shareBtnCls {
    // margin-left: 12px!important;
    padding-left: 5px!important;
    width: 100px!important;
  }
  [name=shareFlights] {
    color: black!important;
  }
}

.flightFormclass .signClass [name=carrier],.signClass [name=flightNo],.signClass [name=direction] {
  background: #FFA500!important;
  color: black!important;
}
</style>

