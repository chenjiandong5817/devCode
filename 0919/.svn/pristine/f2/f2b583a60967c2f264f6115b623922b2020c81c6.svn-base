<!-- /*
 * @Author: cdroid
 * @Date: 2017-05-25 10:42:17
 * @Last Modified by: mikey.zhaopeng
 * @Last Modified time: 2017-06-27 15:33:48
 * @Description: 通用机场列表界面
 */ -->
<template>
  <section>
    <!--工具条-->
    <el-col :span="24" class="toolbar" style="padding-bottom: 0px;">
      <el-form :inline="true" :model="filters">
        <el-form-item>
          <el-select v-model="filters.airportCode" placeholder="请选择机场">
            <el-option
              v-for="item in adminAirportChoose"
              :key="item.value"
              :label="item.text"
              :value="item.value">
              <span style="float: left">{{ item.text }}</span>
              <span style="float: right; color: #8492a6; font-size: 13px">{{ item.code }}</span>
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-select v-model="filters.carouselType" placeholder="请选择行李转盘类型">
            <el-option label="全部" value=""></el-option>
            <el-option label="进" value="A"></el-option>
            <el-option label="出" value="D"></el-option>
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-input v-model="filters.carouselCode" placeholder="编码" ></el-input>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" v-on:click="getBaggagecarouselsList">查询</el-button>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="handleAdd">新增</el-button>
        </el-form-item>
      </el-form>
    </el-col>

    <!--列表-->
    <el-table v-bind:data="baggagecarousels" highlight-current-row v-loading="listLoading" @selection-change="selsChange" :height="tableHeight" style="width: 100%;">
      <el-table-column type="selection" width="55">
      </el-table-column>
      <el-table-column type="index" width="60">
        <template scope="scope">
          {{pageSize * (pageNumber - 1) + scope.$index + 1 }}
        </template>
      </el-table-column>
      <el-table-column prop="carouselCode" label="编码" width="90" sortable>
      </el-table-column>
      <el-table-column prop="airportCode" label="所属机场" width="180" :formatter="formatterAirport" show-overflow-tooltip>
      </el-table-column>
      <el-table-column prop="carouselSize" label="大小" width="75">
      </el-table-column>
      <el-table-column prop="carouselType" label="行李转盘类型" width="130" :formatter="baseUtil.formatterCarouselType">
      </el-table-column>
      <el-table-column prop="terminal" label="所属航站楼" width="115" :formatter="formatterTerminal">
      </el-table-column>
      <el-table-column prop="nature" label="区域" width="75" :formatter="baseUtil.formatterNature">
      </el-table-column>
      <el-table-column prop="status" label="状态" width="75" :formatter="baseUtil.formatterStatus">
      </el-table-column>
      <el-table-column prop="description" label="描述" width="180" show-overflow-tooltip>
      </el-table-column>
      <el-table-column prop="remark" label="备注" width="180" show-overflow-tooltip>
      </el-table-column>
      <el-table-column prop="lastUpdated" label="最后更新时间" min-width="180">
      </el-table-column>
      <el-table-column label="操作" width="180" fixed="right" >
        <template scope="scope">
          <!-- <el-dropdown @command="handleCommand">
            <el-button size="small" >更多操作<i class="el-icon-caret-bottom el-icon--right"></i></el-button>
            <el-dropdown-menu slot="dropdown">
              <el-dropdown-item command="handleEdit" :index="scope.$index" :row="scope.row"><span><i class="el-icon-edit"></i> 编辑 </span></el-dropdown-item>
              <el-dropdown-item command="handleDel" :index="scope.$index" :row="scope.row"><span><i class="el-icon-delete"></i> 删除 </span></el-dropdown-item>
            </el-dropdown-menu>
          </el-dropdown> -->
          <el-button size="small" @click="handleEdit(scope.$index, scope.row)"><span><i class="el-icon-edit"></i> 编辑 </span></el-button>
          <el-button size="small" @click="handleDel(scope.$index, scope.row)"><span><i class="el-icon-delete"></i> 删除 </span></el-button>
        </template>
      </el-table-column>
    </el-table>

    <!--分页-->
    <pagination :to="getBaggagecarouselsList" ref="page"></pagination>

    <!--新增界面-->
    <common-add-or-update
        @getSelectItem="getTerminalChoose"
        type="add"
        :to="API.addBaggagecarousels().go"
        :callback="getBaggagecarouselsList"
        :labelWidth="100"
        ref="addForm"></common-add-or-update>
    <!--编辑界面-->
    <common-add-or-update
        @getSelectItem="getTerminalChoose"
        title="编辑"
        type="update"
        :to="API.editBaggagecarousels().go"
        :callback="getBaggagecarouselsList"
        :labelWidth="100"
        ref="editForm"></common-add-or-update>
    <!--删除窗口-->
    <common-delete
        :to="API.removeBaggagecarousels().go"
        :callback="getBaggagecarouselsList"
        :labelWidth="100"
        ref="delConfirm"></common-delete>
  </section>
</template>

<script>
  import Util from '../../common/js/util'
  import baseUtil from '../../common/js/base-util'
  import chooseDialog from './../../components/CommChooseGrid'
  import commonAddOrUpdate from './../../components/CommAddOrUpdate'
  import commonDelete from './../../components/CommDelete'
  import API from '../../api'
  import Pagination from '../../components/Pagination'

  export default {
    data () {
      return {
        filters: {
          carouselCode: '',
          carouselType: '',
          airportCode: '',
          nature: '',
          status: '',
          terminal: ''
        },
        baggagecarousels: [],
        tableHeight: 495,
        listLoading: false,
        terminals: [],
        airports: [],
        // 添加还是编辑的标记
        addUpdateTag: null,
        // 用于识别机场的值是否改变
        airportCodeTag: null,
        sels: [],
        // 登录用户订阅的机场
        adminAirportChoose: [],
        // 新增编辑需要的字段
        fields: [
          { name: 'id', value: '', hidden: true },
          { name: 'airportCode', value: '', label: '所属机场', type: 'selectExplain', choose: [], filterable: true, rules: null, placeholder: '' },
          { name: 'carouselCode', value: '', label: '编码', type: 'text', rules: [ { max: 6, min: 1, required: true, message: '请输入一位到六位字符串的编码' } ], placeholder: '编码' },
          { name: 'carouselType', value: '', label: '转盘类型', type: 'select', choose: [ { text: '进', value: 'A' }, { text: '出', value: 'D' } ], rules: [ { required: true, message: '请选择行李转盘类型' } ], placeholder: '' },
          { name: 'carouselSize', value: '', label: '大小', type: 'text', rules: [ { max: 1, min: 1, message: '请输入一位字符串的大小' } ], placeholder: '' },
          { name: 'nature', value: '', label: '区域', type: 'select', choose: [ { text: '国际', value: 'I' }, { text: '国内', value: 'D' }, { text: '地区', value: 'R' } ], rules: [ { max: 1, min: 1, required: true, message: '请输入区域' } ], placeholder: '区域' },
          { name: 'terminal', value: '', label: '所属航站楼', type: 'select', choose: [], rules: [ { required: true, message: '请选择所属航站楼' } ], placeholder: '请选择所属航站楼' },
          { name: 'status', value: '', label: '状态', type: 'select', choose: [ { text: '可用', value: 'A' }, { text: '禁用', value: 'D' }, { text: '开放', value: 'O' }, { text: '关闭', value: 'C' } ], rules: [ { required: true, message: '请选择状态' } ], placeholder: '请选择' },
          { name: 'description', value: '', label: '描述', type: 'textarea', rules: [ { max: 50, min: 1, message: '请输入少于五十位字符串的描述' } ], placeholder: '' },
          { name: 'remark', value: '', label: '备注', type: 'textarea', rules: [ { max: 100, min: 1, message: '请输入少于一百位字符串的备注' } ], placeholder: '' }
        ],
        API: API,
        baseUtil: baseUtil
      }
    },
    computed: {
      pageNumber () {
        return this.$refs['page'].get('pageNumber')
      },
      pageSize () {
        return this.$refs['page'].get('pageSize')
      }
    },
    components: {
      chooseDialog: chooseDialog,
      commonAddOrUpdate: commonAddOrUpdate,
      commonDelete: commonDelete,
      pagination: Pagination
    },
    methods: {
      // 获取用户列表
      getBaggagecarouselsList () {
        let para = Object.assign({}, this.filters, this.$refs['page'].queryParam())
        this.listLoading = true
        API.getBaggagecarouselsListPage().go(para).then((data) => {
          if (data.ok) {
            this.$refs['page'].set('total', data.attr.data.pager.recordCount)
            this.baggagecarousels = data.attr.data.list
            this.filters.carouselCode = ''
            this.filters.carouselType = null
            this.filters.airportCode = ''
          } else {
            this.$notify(Util.notifyBody(false, data.msg))
          }
          this.listLoading = false
        })
      },
      selsChange: function (sels) {
        this.sels = sels
      },
      handleCommand: function (command, self) {
        var node = self.$vnode.data.attrs
        /* eslint-disable */
        eval('this.' + command).call(this, node.index, node.row)
        /* eslint-enable */
      },
      // 删除
      handleDel: function (index, row) {
        this.$refs['delConfirm'].del(row.id)
      },
      // 显示新增界面
      handleAdd: function () {
        this.addUpdateTag = 'add'
        this.fields[1].choose = this.adminAirportChoose
        if (this.adminAirportChoose.length === 1) {
          this.fields[1].value = this.adminAirportChoose[0].value
        }
        // this.fields[6].choose = this.terminals
        let addFields = Util.deepCopy(this.fields)
        this.$refs['addForm'].show(addFields)
      },
      // 显示编辑界面
      handleEdit: function (index, row) {
        this.addUpdateTag = 'update'
        this.airportCodeTag = row.airportCode
        this.fields[1].choose = this.adminAirportChoose
        if (this.adminAirportChoose.length === 1) {
          this.fields[1].value = this.adminAirportChoose[0].value
        }
        // this.fields[6].choose = this.terminals
        let editFields = Util.deepCopy(this.fields)
        for (let i = 0; i < editFields.length; i++) {
          editFields[i].value = row[editFields[i].name]
        }
        this.$refs['editForm'].show(editFields)
      },
      // 获取航站楼信息列表
      getTerminalList: function (index, row) {
        let para = {
          id: ''
        }
        API.getTerminalListPage().go(para).then((data) => {
          var result = []
          for (var i = 0; i < data.attr.data.list.length; i++) {
            var item = {}
            item['text'] = data.attr.data.list[i].terminalCode
            item['value'] = data.attr.data.list[i].terminalCode
            item['airportCode'] = data.attr.data.list[i].airportCode
            result.push(item)
          }
          this.terminals = result
        })
      },
      // 格式化航站楼的代码
      formatterTerminal: function (row, column, cellValue) {
        for (var i = 0; i < this.terminals.length; i++) {
          if (this.terminals[i].value === cellValue) {
            return this.terminals[i].text
          }
        }
      },
      // 获取通用机场的列表
      getAirportList: function () {
        let para = {
          iatacode: '',
          icaocode: '',
          pageNumber: 1,
          pageSize: 10000
        }
        API.getAirportListPage().go(para).then((data) => {
          this.airports = Util.typedAirport(data.attr.data.list)
          // 筛选出登录用户的订阅机场
          var result = []
          var subscibeAirport = JSON.parse(sessionStorage.getItem('userStorage')).user.aiisAirports
          for (var i = 0; i < subscibeAirport.length; i++) {
            for (var j = 0; j < this.airports.length; j++) {
              if (subscibeAirport[i].airportCode === this.airports[j].value) {
                result.push(this.airports[j])
              }
            }
          }
          this.adminAirportChoose = result
        })
      },
      // 格式化机场的的代码
      formatterAirport: function (row, column, cellValue) {
        for (var i = 0; i < this.airports.length; i++) {
          if (this.airports[i].value === cellValue) {
            return this.airports[i].text1
          }
        }
      },
      // 通过机场代码的筛选，选出所属航站楼
      getTerminalChoose: function (data) {
        if (data.airportCode !== this.airportCodeTag) {
          var terminalValue = null
          var terminalResult = []
          for (var i = 0; i < this.terminals.length; i++) {
            if (this.terminals[i].airportCode === data.airportCode) {
              terminalResult.push(this.terminals[i])
            }
          }
          if (this.addUpdateTag === 'add') {
            var terminalStrAdd = 'terminal'
            // 传入的四个值分别代表要改变值的下标，值，要清空的key值，空值
            this.$refs['addForm'].changeSelectChoose(6, terminalResult, terminalStrAdd, terminalValue)
          }
          if (this.addUpdateTag === 'update') {
            var terminalStrUpdate
            this.$refs['editForm'].changeSelectChoose(6, terminalResult, terminalStrUpdate, terminalValue)
          }
        }
        this.airportCodeTag = data.airportCode
      }
    },
    mounted () {
      this.getBaggagecarouselsList()
      this.getTerminalList()
      this.getAirportList()
    }
  }

</script>

<style scoped>

</style>
