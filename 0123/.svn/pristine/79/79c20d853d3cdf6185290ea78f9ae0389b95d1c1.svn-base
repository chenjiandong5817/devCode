<script>
import TwinkleText from './TwinkleText'
import Logo from './Logo'
import Flop from './Flop/Flop'
import FlopItem from './Flop/Flop-item'
import Grid from './table/table'
import GridColumn from './table/table-column'
import FlexImageView from './FlexImageView'
import DoubleLayerText from './DoubleLayerText'
import axios from 'axios'
import EmptyDataConf from './../../mock/emptyData'
import Tools from './../common/js/template-tools'
import MarqueeText from './../components/MarqueeText'
import Clock from './../components/Clock'
import SYSCONFIG from './../common/config/sysconfig'
import { getTemplate, getSourceData, getDeviceInfo, getDeviceGroup, getServerStorage } from './../api'
export default {
  data () {
    return {
      testEnv: false,
      testData: {},
      deviceInfo: {},
      deviceGroup: {},
      pagerHelper: {},
      templateConf: null,
      // 有值时候的模板
      templateValueConf: null,
      extraParam: {},
      loaded: false,
      apiData: {},
      timers: {},
      langSwitch: {
        langs: [ 'zh-cn', 'en-ww' ],
        current: 'zh-cn',
        interval: 15000,
        timer: null
      },
      // 加载数据标志
      dataLoading: true
    }
  },
  components: {
    DoubleLayerText, MarqueeText, Clock, FlexImageView, Grid, GridColumn, Logo, TwinkleText, Flop, FlopItem
  },
  methods: {
    completeDeviceInfo () {
      let deviceId = this.$route.params.deviceId
      getDeviceInfo(deviceId).then(res => {
        let devices = res.attr.data.list
        // console.log(devices)
        if (res.ok && devices.length > 0) {
          this.deviceInfo = devices[0]
          console.log('device', this.deviceInfo)
          // 把设备信息加入apiData
          this.apiData[SYSCONFIG.CURRENT_DEVICE_INFO] = this.deviceInfo
          this.loadConf(this.deviceInfo.id)
        } else {
          this.$notify({
            type: 'error',
            title: '失败',
            message: '无法获取设备信息'
          })
        }
      }).then(() => {
        // 获取设备分组
        getDeviceGroup(this.deviceInfo.groupId).then(res => {
          if (res.ok && res.attr) {
            console.log('group', res.attr.data)
            this.deviceGroup = res.attr.data
          } else {
            console.warn('当前设备无分组信息或者为单屏设备')
            this.deviceGroup = {
              groupSize: 1
            }
          }
        }).catch(err => {
          console.error(err)
        })
      })
    },
    // 加载模板配置，传入参数设备id
    loadConf (deviceId) {
      if (this.testEnv) {
        this.templateConf = this.testData.conf
        this.templateValueConf = Tools.deepCopy(this.templateConf)
        this.templateConf && (this.extraParam = this.templateConf.extraParam || {})
        this.queryAllData()
        this.buildLangSwitch()
      } else {
        getTemplate({deviceId: deviceId, airportCode: this.deviceInfo.airportCode}).then(res => {
          // console.log(res)
          if (res.ok) {
            this.templateConf = JSON.parse(res.attr ? res.attr.data.content : '{}')
            this.templateValueConf = Tools.deepCopy(this.templateConf)
            // let templateConf = require('./../../mock/编辑器测试')
            // let templateConf = require('./../../mock/2.0登机口')
            // this.templateConf = templateConf

            console.log('template:', this.templateConf)

            // 加载 extraParam
            this.templateConf && (this.extraParam = this.templateConf.extraParam || {})

            if (!this.templateConf) {
              this.$notify({
                type: 'error',
                title: '失败',
                message: '空白的模板配置'
              })
              return
            }
            this.queryAllData()
            this.buildLangSwitch()
          } else {
            this.$notify({
              type: 'error',
              title: '失败',
              message: '获取模板失败'
            })
          }
        })
      }
    },
    // 查询模板内所有数据源id,并进行请求
    queryAllData () {
      // 获取配置内所有的数据源id
      let apiIds = Tools.recurDataSource(this.templateConf)
      if (apiIds && apiIds.length > 0) {
        let methods = []
        let _this = this
        let checkData = () => {
          // 无数据 加载无数据模板
          console.log('mockdata', _this.apiData)
          this.checkDataEmpty(_this.apiData)
          setTimeout(() => {
            // _this.$set(_this.loaded, 'conf', true)
            _this.loaded = true
          }, 200)
        }
        let checkScrillText = () => {
          // 判断是否需要动态滚动文本
          try {
            if (this.extraParam && (this.testEnv || this.deviceInfo.dynamicScrollTextSourceId === '1')) {
              let dynamicTextConf = this.extraParam.dynaScrollText
              let dynamicText = Tools.getMatchData(this.apiData[dynamicTextConf.dataSource], dynamicTextConf.singleData)
              this.deviceInfo.dynamicScrollText = dynamicText[dynamicTextConf.columnName]
              // console.log(dynaText[dynaTextConf.columnName])
            }
          } catch (err) { console.warn('请检查 extraParam 配置！') }
        }
        if (this.testEnv) {
          console.log(this.testData)
          for (let key in this.testData.data) {
            this.$set(this.apiData, key, this.testData.data[key])
          }
          console.log(this.apiData)
          checkData()
          checkScrillText()
        } else {
          for (let i = 0; i < apiIds.length; i++) {
            // 过滤假定数据源
            if (apiIds[i].key.includes('$')) {
              continue
            }
            methods.push(() => {
              let params = Object.assign({}, {id: apiIds[i].key}, _this.buildQueryParam(apiIds[i].mainPager))
              return getSourceData(params)
            })
          }
          // 开始加载数据
          _this.dataLoading = true
          axios
            .all(methods.map(method => method()))
            .then(axios.spread((...results) => {
              // 清空apiData
              _this.apiData = {}
              results.forEach(res => {
                // console.log(res)
                Object.assign(_this.apiData, res.attr || {})
              })
              // let mockData = require('./../../mock/行李转盘数据')
              // _this.apiData = Object.assign({}, _this.apiData, mockData || {})
            })
          ).then(checkData).then(checkScrillText)
        }
      } else {
        // this.$set(this.loaded, 'conf', true)
        this.loaded = true
      }
    },
    // 生成请求数据参数
    buildQueryParam (mainPager) {
      let params = {
        airportCode: this.deviceInfo.airportCode,
        deviceId: this.deviceInfo.id,
        langlist: this.templateConf ? this.templateConf.langs : ''
      }
      if (this.extraParam && this.extraParam.destination) {
        params = Object.assign({}, params, { destination: this.extraParam.destination })
      }
      if (mainPager) {
        return Object.assign({}, {
          pageNumber: this.deviceInfo.groupSort || 1,
          pageSize: this.deviceInfo.pageSizeC
        }, params)
      } else {
        return params
      }
    },
    // 提取语言切换的参数
    buildLangSwitch () {
      let { langTimer, defaultLang, langs } = this.templateConf
      this.langSwitch.interval = langTimer || this.langSwitch.interval
      this.langSwitch.current = defaultLang || this.langSwitch.current
      this.langSwitch.langs = langs || this.langSwitch.langs

      // 定时切换
      var changeLang = () => {
        let langs = this.langSwitch.langs
        let current = this.langSwitch.current
        let idx = Tools.indexOf(langs, current)
        if (idx >= langs.length - 1 && idx > -1) {
          idx = 0
        } else {
          idx += 1
        }
        this.$set(this.langSwitch, 'current', langs[idx])
      }
      if (this.langSwitch.timer) {
        clearInterval(this.langSwitch.timer)
      }
      this.langSwitch.timer = setInterval(changeLang, this.langSwitch.interval)
    },
    transLang (target) {
      if (target instanceof Object) {
        return target[this.langSwitch.current] || target['en-ww'] || target['zh-cn'] || ''
      } else {
        return target || ''
      }
    },
    checkDataEmpty (data) {
      let empty = false
      // 得从有数据的模板内获取数据源id， 20180110 修改
      let apiIds = Tools.recurDataSource(this.templateValueConf)
      let apiSource = []
      let firstNoDataApi = null
      for (let i = 0; i < apiIds.length; i++) {
        if (apiIds[i].key.startsWith('$') || !apiIds[i].mainSource) {
          continue
        }
        apiSource.push(apiIds[i])
      }
      for (let j = 0; j < apiSource.length; j++) {
        let api = apiSource[j]
        if (!data[api.key] || !data[api.key].list || data[api.key].list.length === 0) {
          empty = true
          // 只要一个为空 就返回
          firstNoDataApi = api
          break
        }
      }
      if (empty) {
        // 单数据 和 非主分页 才转成空模板
        // (firstNoDataApi.singleData || !firstNoDataApi.mainPager) && (this.templateConf = EmptyDataConf)
        this.templateConf = EmptyDataConf
        // 20180110 加入无数据之后的数据刷新机制
        if (firstNoDataApi && firstNoDataApi.key && !this.timers[firstNoDataApi.key] && !this.testEnv) {
          this.setDataInterval(firstNoDataApi.key, firstNoDataApi.refreshInterval, firstNoDataApi.mainPager)
        }
      } else {
        this.templateConf = this.templateValueConf
      }
      // 加载数据完毕
      // let _this = this
      // setTimeout(() => {
      //   _this.dataLoading = false
      // }, 1000)
      this.dataLoading = false
    },
    // checkPagerInfo (conf) {
    //   // 分页信息加入main_pager
    //   if (conf.dataSource && conf.mainPager) {
    //     this.apiData[SYSCONFIG.MAIN_PAGER] = this.apiData[conf.dataSource] ? this.apiData[conf.dataSource].pager : {};
    //     // 定时，分页切换
    //     (this.deviceInfo.groupSort === 0 || this.deviceInfo.groupSort >= this.deviceGroup.groupSize) &&
    //     conf.pageInterval && this.setPageInterval(conf.dataSource, conf.pageInterval)
    //   }
    // },
    // 定时刷新分页
    // setPageInterval (api, interval) {
    //   let _this = this
    //   if (_this.timers[SYSCONFIG.MAIN_PAGER] || _this.testEnv) {
    //     return
    //   }
    //   _this.pagerHelper = _this.buildQueryParam(true)
    //   let timer = setInterval(() => {
    //     let pageCount = _this.apiData[SYSCONFIG.MAIN_PAGER].pageCount
    //     _this.pagerHelper.pageNumber += 1
    //     if (_this.pagerHelper.pageNumber > pageCount) {
    //       _this.pagerHelper.pageNumber = _this.deviceInfo.groupSort
    //     }
    //     getSourceData(Object.assign({id: api}, _this.pagerHelper)).then(res => {
    //       _this.apiData = Object.assign({}, _this.apiData, res.attr || {})
    //       console.log('changPage', 'current page:' + _this.pagerHelper.pageNumber)
    //     })
    //   }, interval)
    //   _this.timers[SYSCONFIG.MAIN_PAGER] = timer
    // },
    // 定时刷新数据 或 分页
    setDataInterval (api, interval, mainPager) {
      let _this = this
      // 分页参数
      if (api && mainPager) {
        _this.apiData[SYSCONFIG.MAIN_PAGER] = _this.apiData[api] ? _this.apiData[api].pager : {}
      }
      if (_this.timers[api] || this.testEnv) {
        // 语言切换小于刷新时间，切换会触发render函数重复执行，所以不能clear，否则定时时间永远不能到达
        // clearInterval(_this.timers[api])
        return
      }
      _this.pagerHelper = _this.buildQueryParam(mainPager)
      let timer = setInterval(() => {
        if (mainPager && (_this.deviceInfo.groupSort === 0 || _this.deviceInfo.groupSort >= _this.deviceGroup.groupSize)) {
          _this.pagerHelper.pageNumber += 1
          if (_this.pagerHelper.pageNumber > _this.apiData[SYSCONFIG.MAIN_PAGER].pageCount) {
            _this.pagerHelper.pageNumber = _this.deviceInfo.groupSort
          }
          // console.log('this operate is pagination, next page is ' + _this.pagerHelper.pageNumber)
        }
        let params = Object.assign({}, {id: api}, _this.pagerHelper)
        getSourceData(params).then(res => {
          let key = Object.keys(res.attr)[0]
          if (key) {
            let data = res.attr[key]
            let len = data && data.list ? data.list.length : 0
            let oldApiData = []
            // 去掉造空行的数据
            if (_this.apiData[key] && _this.apiData[key].list && _this.apiData[key].list.length > 0) {
              oldApiData = _this.apiData[key].list.filter(item => {
                return !Tools.emptyObject(item)
              })
            }
            if (oldApiData.length !== len) {
              // 不同长度的数据需要重新加载页面，因此设置loading为true 使页面重载
              _this.dataLoading = true
            }
            delete _this.apiData[key]
            _this.$nextTick(() => _this.$set(_this.apiData, key, res.attr[key]))
          }
          // _this.apiData = Object.assign({}, _this.apiData, res.attr || {})
          // console.log('refresh', 'apiId:' + api, ',interval:' + interval)
        }).then(() => {
          // 20180109 修改检测刷新之后的模板显示
          _this.checkDataEmpty(_this.apiData)
        })
      }, interval)
      this.timers[api] = timer
    },
    // 造空行
    setVirtualRow (ajaxData) {
      if (ajaxData instanceof Array && this.extraParam.virtualRowSize && ajaxData.length < Number(this.extraParam.virtualRowSize)) {
        for (let i = 0; i < this.extraParam.virtualRowSize - ajaxData.length; i++) {
          ajaxData.push({})
        }
      }
    },
    // 标签渲染选择器
    confRender (h, conf, ajaxData) {
      // this.checkPagerInfo(conf)
      if (conf.dataSource) {
        ajaxData = Tools.getMatchData(this.apiData[conf.dataSource], conf.singleData, conf.dataSource.startsWith('$'))
        // 造空行
        this.setVirtualRow(ajaxData)

        // 定时刷新, 具有mainPager的属性 则转为定时分页
        // ((conf.mainPager && this.deviceInfo.groupSort > 0 && this.deviceInfo.groupSort < this.deviceGroup.groupSize) || (!conf.mainPager)) &&
        conf.refreshInterval && this.setDataInterval(conf.dataSource, conf.refreshInterval, conf.mainPager)
      }
      let rs = {}
      switch (conf.type) {
        case 'Layout':
          rs = this.templateRender(h, conf, ajaxData)
          break
        case 'Row':
          rs = this.rowRender(h, conf, ajaxData)
          break
        case 'Column':
          rs = this.columnRender(h, conf, ajaxData)
          break
        case 'Grid':
          rs = this.gridRender(h, conf, ajaxData)
          break
        case 'DoubleLayerText':
          rs = this.doubleLayerTextRender(h, conf, ajaxData)
          break
        case 'Image':
          rs = this.imageRender(h, conf, ajaxData)
          break
        case 'MarqueeText':
          rs = this.marqueeTextRender(h, conf, ajaxData)
          break
        case 'Clock':
          rs = this.clockRender(h, conf, ajaxData)
          break
        case 'FlexImageView':
          rs = this.flexImageViewRender(h, conf, ajaxData)
          break
        case 'Logo':
          rs = this.logoRender(h, conf, ajaxData)
          break
        case 'Flop':
          rs = this.flopRender(h, conf, ajaxData)
          break
        default:
          rs = this.textRender(h, conf, ajaxData)
      }
      return rs
    },
    // 最外层渲染
    templateRender (h, conf, ajaxData) {
      return h(
        'div',
        { style: Tools.completeStyleSuffix(conf.bodyStyle), class: 'raiis-template-layout' },
        [
          // 加载数据的时候不加载组件
          !this.dataLoading && this._l(conf.children, (row, index) => this.confRender(h, row, ajaxData))
        ]

      )
    },
    // 行渲染
    rowRender (h, conf, ajaxData) {
      return h(
        'el-row',
        {
          attrs: {
            type: 'flex',
            align: conf.align,
            justify: conf.justify
          },
          style: Tools.completeStyleSuffix(conf.bodyStyle)
        },
        [
          this._l(conf.children, (col, colIdx) => this.confRender(h, col, ajaxData))
        ]
      )
    },
    // 列渲染
    columnRender (h, conf, ajaxData) {
      return h(
        'el-col',
        {
          attrs: { span: conf.span },
          style: Tools.completeStyleSuffix(conf.bodyStyle)
        },
        [
          this._l(conf.children, (child, childIdx) => this.confRender(h, child, ajaxData))
        ]
      )
    },
    // 新版列表渲染
    gridRender (h, conf, ajaxData) {
      let list = ajaxData instanceof Array ? ajaxData : [ajaxData]
      let bodyStyle = Tools.completeStyleSuffix(conf.bodyStyle)
      let handleRowStyle = (row, index) => {
        let rowStripe = bodyStyle.defaultRowStyle.rowStripe
        if (!rowStripe || rowStripe.length === 0) {
          rowStripe = ['']
        }
        return Object.assign({}, bodyStyle.defaultRowStyle, { backgroundColor: (index % 2 === 0) ? rowStripe[0] : (rowStripe[1] || rowStripe[0]) })
      }
      return h(
        'grid',
        {
          props: {
            data: list,
            rowStyle: handleRowStyle,
            tooltip: false,
            hoverRow: false,
            showHeader: !conf.hiddenHeader
          },
          style: Tools.completeStyleSuffix(Object.assign({}, {width: '100%'}, bodyStyle.style))
        },
        [
          this._l(conf.children, (column, columnIdx) => this.gridColumnRender(h, column, list, bodyStyle))
        ]
      )
    },
    // 列表字段渲染
    gridColumnRender (h, conf, ajaxData, defaultStyle) {
      let style = Tools.completeStyleSuffix(conf.style)
      return h(
        'grid-column',
        {
          props: {
            prop: conf.name,
            label: typeof conf.label === 'number' ? String(conf.label) : (this.transLang(conf.label) || ''),
            width: style.width,
            minWidth: style.minWidth,
            align: conf.style.textAlign,
            columnStyle: style,
            headerStyle: Object.assign({}, defaultStyle ? defaultStyle.defaultHeaderStyle : {}, Tools.completeStyleSuffix(conf.headerStyle))
          },
          scopedSlots: {
            default: scope => this._l(conf.children, (child, childIdx) => this.confRender(h, child, scope.row))
          }
        }
      )
    },
    // logo切换渲染
    logoRender (h, conf, ajaxData) {
      let list = Tools.handleMultiSource(conf, ajaxData)
      let data = list.map(item => {
        return SYSCONFIG.IMGPATH + Tools.genImgPath(conf, item, this.deviceInfo.airportCode)
      })
      return h(
        'logo',
        {
          props: {
            data: data,
            height: conf.height instanceof String ? conf.height : `${conf.height}px`,
            algin: conf.align,
            interval: conf.interval,
            type: conf.type,
            size: conf.size,
            radius: conf.radius,
            imgStyle: Tools.completeStyleSuffix(conf.style)
          }
        }
      )
    },
    // 翻转图片切换渲染
    flopRender (h, conf, ajaxData) {
      ajaxData = ajaxData instanceof Array ? ajaxData : [ajaxData]
      return h(
        'flop',
        {
          style: Tools.completeStyleSuffix(conf.style),
          props: {
            interval: conf.interval
          }
        },
        [
          conf.multiSource ? (
            this._l(Tools.handleMultiSource(conf, ajaxData), (item, index) => {
              let itemConf = Object.assign({}, conf.children)
              Tools.coverFlopValue(itemConf, 'columnName', 'flopItemName')
              return h(
                'flop-item',
                [
                  // this.confRender(h, itemConf, {flopItemName: item})
                  this._l(itemConf, (child, childIdx) => this.confRender(h, child, {flopItemName: item}))
                ]
              )
            })
          ) : (
            this._l(ajaxData, data => {
              return h(
                'flop-item',
                [
                  // this.confRender(h, conf.item, data)
                  this._l(conf.children, (child, childIdx) => this.confRender(h, child, data))
                ]
              )
            })
          )
        ]
      )
    },
    // 滑动图片视图
    flexImageViewRender (h, conf, ajaxData) {
      let list = ajaxData instanceof Array ? ajaxData : [ajaxData]
      let data = list.map(item => {
        return SYSCONFIG.IMGPATH + Tools.genImgPath(conf, item, this.deviceInfo.airportCode)
      })
      return h(
        'flex-image-view',
        {
          props: {
            showType: conf.showType,
            data: data,
            translateX: conf.translateX,
            translateY: conf.translateY,
            imgStyle: Tools.completeStyleSuffix(conf.imgStyle),
            spacing: conf.spacing,
            autoSize: conf.autoSize
          },
          style: Tools.completeStyleSuffix(conf.style)
        }
      )
    },
    // 双层文本渲染
    doubleLayerTextRender (h, conf, ajaxData) {
      /**
       * type: 'doubleLayerText',
       * align
       * translateX
       * translateY
       * topStyle
       * bottomStyle
       * slicePoint 把children分割成上下部分临界点
       * children
      */
      let slicePoint = conf.slicePoint > conf.children.length ? conf.children.length : conf.slicePoint
      let topContent = conf.children.slice(0, slicePoint) || []
      let bottomContent = conf.children.slice(slicePoint) || []
      return h(
        'double-layer-text',
        {
          attrs: {
            align: conf.align,
            translateX: conf.translateX,
            translateY: conf.translateY,
            topStyle: Tools.completeStyleSuffix(conf.topStyle),
            bottomStyle: Tools.completeStyleSuffix(conf.bottomStyle)
          }
        },
        [
          h(
            'div',
            { slot: 'topSlot' },
            [
              topContent && topContent.length > 0
              ? this._l(topContent, (content, index) => this.confRender(h, content, ajaxData))
              : ''
            ]
          ),
          h(
            'div',
            { slot: 'bottomSlot' },
            [
              bottomContent && bottomContent.length > 0
              ? this._l(bottomContent, (content, index) => this.confRender(h, content, ajaxData))
              : ''
            ]
          )
        ]
      )
    },
    // 滚动文本
    marqueeTextRender (h, conf, ajaxData) {
      let hidden = false
      if (conf.hiddenBy) {
        for (let i = 0; i < conf.hiddenBy.length; i++) {
          let item = conf.hiddenBy[i]
          if (typeof item !== 'object') {
            item = { [item]: true }
          }
          for (let key in item) {
            if (ajaxData[key] !== undefined && !ajaxData[key]) {
              hidden = item[key]
            } else {
              hidden = !item[key]
            }
          }
        }
      }
      return h(
        'marquee-text',
        {
          style: Tools.completeStyleSuffix(conf.style),
          props: {
            speed: conf.speed,
            seamless: conf.seamless,
            always: conf.always,
            vertical: conf.vertical,
            backZero: conf.backZero,
            hidden: hidden
          }
        },
        [
          this._l(conf.children, (content, index) => this.confRender(h, content, ajaxData))
        ]
      )
    },
    // 图片渲染
    imageRender (h, conf, ajaxData = {}) {
      // 造假行的时候img标签会提示url错误，屏蔽掉, 20180109修改，static图片的错误过滤情况
      if (conf.columnName && !conf.columnName.includes(',') && (!ajaxData[conf.columnName] && !conf.static)) {
        return
      }
      let imgPath = SYSCONFIG.IMGPATH + Tools.genImgPath(conf, ajaxData, this.deviceInfo.airportCode)
      if (conf.url) {
        imgPath = conf.url
      }
      return h(
        'img',
        {
          attrs: {
            src: imgPath
          },
          style: Tools.completeStyleSuffix(conf.style)
        }
      )
    },
    // 渲染时钟
    clockRender (h, conf, ajaxData = {}) {
      return h(
        'clock',
        {
          style: Tools.completeStyleSuffix(conf.style)
        }
      )
    },
    // 文本渲染
    textRender (h, conf, ajaxData = {}) {
      let realText = Tools.renderText(conf, ajaxData)
      let text = this.transLang(realText)
      if (text) {
        text = `${(conf.prefix || '') + text + (conf.suffix || '')}`
      }
      return h(
        'twinkle-text',
        {
          props: {
            twinkled: Boolean(Tools.transTextProp(realText, conf.twinkle)),
            inline: conf.tag === 'span' || (conf.style && conf.style.display === 'inline-block')
          }
        },
        [
          h(
            'div',
            {
              style: Object.assign(
                {},
                Tools.completeStyleSuffix(conf.style),
                conf.transColor ? {
                  color: Tools.transTextProp(realText, conf.transColor)
                } : {}
              )
            },
            [
              conf.replace ? Tools.replaceText(text, conf.replace, ajaxData) : text,
              conf.mergeText ? (Tools.addsMergeText(realText, conf.mergeText, ajaxData) || []).map(item => {
                return this.transLang(item)
              }).join('') : ''
            ]
          )
        ]
      )
    }
  },
  created () {
    // 判断用于显示还是测试
    if (this.$route.path.endsWith('test')) {
      this.testEnv = true
      getServerStorage(this.$route.params.testDataId).then(res => {
        if (res.attr && res.attr.obj) {
          this.testData = res.attr.obj
          this.completeDeviceInfo()
        } else {
          this.$notify({ type: 'error', title: '失败', message: '获取测试数据失败' })
        }
      })
    } else {
      this.completeDeviceInfo()
    }
  },
  destroyed () {
    for (let key in this.timers) {
      clearInterval(this.timers[key])
    }
  },
  render (h) {
    // console.log('--------------------  render ---------------------')
    if (!this.loaded || !this.templateConf) { return }
    return this.confRender(h, this.templateConf)
  }
}
</script>
<style>
body {
  /* background-color: #1E2D5A; */
  height: 100%;
  width: 100%;
  overflow: hidden;
  margin: 0;
}
.raiis-template-layout .el-table {
  border: 0 !important;
  background-color: transparent !important;
}

.raiis-template-layout .el-table table {
  border-collapse: collapse;
}
.raiis-template-layout .el-table__body-wrapper {
  overflow: hidden !important;
}
.raiis-template-layout .el-table::after, .el-table::before {
  height: 0 !important;
  content: none !important;
}
/* 标题默认样式 */
.raiis-template-layout .el-table th {
  font-weight: normal;
}

/* 标题文本区域默认样式*/
.raiis-template-layout .el-table th.is-leaf {
  background-color: #1E2D5A;
  line-height: 100px;
}

.raiis-template-layout .el-table tr {
  transition: all .2s;
  -moz-transition: all .2s;
  -webkit-transition: all .2s;
  -o-transition: all .2s;
  color: #FFFFFF;
}

/* td基本样式 */
.raiis-template-layout .el-table td {
  border-bottom: 0px !important;
  padding: 0px 5px 0px 5px;
}

/* td 文本框基本样式 不换行 */
.raiis-template-layout .el-table td .cell {
  /* padding-left: 0px !important;
  padding-right: 0px !important; */
  /* margin-left: 5px !important;
  margin-right: 5px !important; */
  white-space: nowrap !important;
}


.raiis-template-layout .radius-class {
  background: #fff;
  -moz-border-radius: 50%;
  -webkit-border-radius: 50%;
  border-radius: 50%;
}
</style>
